{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# 0.定数の定義 & モジュール作成"
      ],
      "metadata": {
        "id": "1_oz5svVIPMq"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RgciAce99J1B"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import math\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from datetime import datetime\n",
        "from zoneinfo import ZoneInfo\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from mpl_toolkits.mplot3d import Axes3D\n",
        "import seaborn\n",
        "\n",
        "\n",
        " #定数\n",
        "a=0.7\n",
        "b=1.4\n",
        "c=4.0\n",
        "d=1.33\n",
        "e=0.6\n",
        "h=1.56\n",
        "g=0.88\n",
        "N = 5   #倍音数\n",
        "\n",
        "#ピアノの鍵盤に対応した周波数のリストを作成\n",
        "fa = 27.5\n",
        "fb = 55\n",
        "fc = 110\n",
        "fd = 220\n",
        "fe = 440\n",
        "ff = 880\n",
        "fg = 1760\n",
        "fh = 3520\n",
        "\n",
        "#音名番号に対応した周波数の設定\n",
        "kenban0=[fa*(2**(1/12))**(i-1) for i in range(1,13)]\n",
        "kenban1=[fb*(2**(1/12))**(i-1) for i in range(1,13)]\n",
        "kenban2=[fc*(2**(1/12))**(i-1) for i in range(1,13)]\n",
        "kenban3=[fd*(2**(1/12))**(i-1) for i in range(1,13)]\n",
        "kenban4=[fe*(2**(1/12))**(i-1) for i in range(1,13)]\n",
        "kenban5=[ff*(2**(1/12))**(i-1) for i in range(1,13)]\n",
        "kenban6=[fg*(2**(1/12))**(i-1) for i in range(1,13)]\n",
        "kenban7=[fh*(2**(1/12))**(i-1) for i in range(1,5)]\n",
        "kenban_list=kenban0+kenban1+kenban2+kenban3+kenban4+kenban5+kenban6+kenban7\n",
        "\n",
        "#使用頻度の高い和音(展開系を含む)の設定\n",
        "Cmaj_0=[kenban_list[39],kenban_list[43],kenban_list[46]] #[4C,4E,4G]\n",
        "Cmaj_1=[kenban_list[43],kenban_list[46],kenban_list[51]]\n",
        "Cmaj_2=[kenban_list[46],kenban_list[51],kenban_list[55]]\n",
        "Cmin_0=[kenban_list[39],kenban_list[42],kenban_list[46]] #[4C,4E♭,4G]\n",
        "Cmin_1=[kenban_list[42],kenban_list[46],kenban_list[51]]\n",
        "Cmin_2=[kenban_list[46],kenban_list[51],kenban_list[54]]\n",
        "Caug_0=[kenban_list[39],kenban_list[43],kenban_list[47]] #[4C,4E,4G#]\n",
        "Caug_1=[kenban_list[43],kenban_list[47],kenban_list[51]]\n",
        "Caug_2=[kenban_list[47],kenban_list[51],kenban_list[55]]\n",
        "Csus4_0=[kenban_list[39],kenban_list[44],kenban_list[46]] #[4C,4F,4G]\n",
        "Csus4_1=[kenban_list[44],kenban_list[46],kenban_list[51]]\n",
        "Csus4_2=[kenban_list[46],kenban_list[51],kenban_list[56]]\n",
        "Cflat5_0=[kenban_list[39],kenban_list[43],kenban_list[45]] #[4C,4E,4G♭]\n",
        "Cflat5_1=[kenban_list[43],kenban_list[45],kenban_list[51]]\n",
        "Cflat5_2=[kenban_list[45],kenban_list[51],kenban_list[55]]\n",
        "Cdim_0=[kenban_list[39],kenban_list[42],kenban_list[45]] #[4C,4E♭,4G♭]\n",
        "Cdim_1=[kenban_list[42],kenban_list[45],kenban_list[51]]\n",
        "Cdim_2=[kenban_list[45],kenban_list[51],kenban_list[54]]\n",
        "C_chord_list=[Cmaj_0,Cmaj_1,Cmaj_2,Cmin_0,Cmin_1,Cmin_2,Caug_0,Caug_1,Caug_2,Csus4_0,Csus4_1,Csus4_2,Cflat5_0,Cflat5_1,Cflat5_2,Cdim_0,Cdim_1,Cdim_2]\n",
        "C_name_list=[\"Cmaj_0\",\"Cmaj_1\",\"Cmaj_2\",\"Cmin_0\",\"Cmin_1\",\"Cmin_2\",\"Caug_0\",\"Caug_1\",\"Caug_2\",\"Csus4_0\",\"Csus4_1\",\"Csus4_2\",\"Cflat5_0\",\"Cflat5_1\",\"Cflat5_2\",\"Cdim_0\",\"Cdim_1\",\"Cdim_2\"]\n",
        "\n",
        "#音量比(v1+v2+v3=1)のリストを作成\n",
        "v_com=[]\n",
        "for i in np.arange(1,9):\n",
        "  for j in np.arange(1,10-i):\n",
        "    v_com.append([round(i*0.1,2),round(j*0.1,2),round(1-i*0.1-j*0.1,2)])\n",
        "\n",
        "#3和音の不協和度モジュール\n",
        "def D(f1,f2,f3,v1,v2,v3,N,a,b,c,d,g):\n",
        "   #倍音の周波数\n",
        "    R = range(1,N+1)\n",
        "    fot1=[f1*i for i in R]\n",
        "    fot2=[f2*i for i in R]\n",
        "    fot3=[f3*i for i in R]\n",
        "    #倍音を考慮した不協和度の計算\n",
        "    D=0\n",
        "    D1=0\n",
        "    D2=0\n",
        "    D3=0\n",
        "    for j in range(N):\n",
        "      for k in range(N):\n",
        "\n",
        "        x12 = abs(12*np.log2(fot2[j]/fot1[k]))\n",
        "        x23 = abs(12*np.log2(fot3[j]/fot2[k]))\n",
        "        x13 = abs(12*np.log2(fot3[j]/fot1[k]))\n",
        "\n",
        "        A = -a*(x12**d)\n",
        "        B = -b*(x12**d)\n",
        "        v12 = np.sqrt((v1 * v2 * (g ** (j+k))))\n",
        "        d12 = c*v12*(np.exp(A)-np.exp(B))\n",
        "        D1 = D1 + d12\n",
        "\n",
        "        A = -a*(x23**d)\n",
        "        B = -b*(x23**d)\n",
        "        v23 = np.sqrt((v2 * v3 * (g ** (j+k))))\n",
        "        d23 = c*v23*(np.exp(A)-np.exp(B))\n",
        "        D2 = D2 + d23\n",
        "\n",
        "        A = -a*(x13**d)\n",
        "        B = -b*(x13**d)\n",
        "        v13 = np.sqrt((v3 * v1 * (g ** (j+k))))\n",
        "        d13 = c*v13*(np.exp(A)-np.exp(B))\n",
        "        D3 = D3 + d13\n",
        "    D = (D1 + D2 + D3)/3\n",
        "    return D\n",
        "\n",
        "#3和音の緊張度・モダリティモジュール\n",
        "def TM(f1,f2,f3,v1,v2,v3,N,e,h,g):\n",
        "    #倍音の周波数\n",
        "    T=0\n",
        "    M=0\n",
        "    R = range(1,N+1)\n",
        "    fot1=[f1*i for i in R]\n",
        "    fot2=[f2*i for i in R]\n",
        "    fot3=[f3*i for i in R]\n",
        "    #倍音を考慮した緊張度の計算\n",
        "    f_list = []\n",
        "    v_list = []\n",
        "    for j in range(N):\n",
        "      for k in range(N):\n",
        "        for l in range(N):\n",
        "          f = [fot1[j], fot2[k], fot3[l]]\n",
        "          f_list.append(sorted(f))\n",
        "          v_list.append((v1 * v2 * v3 * (g ** (j+k+l)))**(1/3))\n",
        "    #音程差\n",
        "    for l in range(N**3):\n",
        "      x12 = (12*np.log2(f_list[l][1]/f_list[l][0]))\n",
        "      x23 = (12*np.log2(f_list[l][2]/f_list[l][1]))\n",
        "      #緊張度\n",
        "      t = v_list[l]*np.exp(-((x23-x12)/e)**2)\n",
        "      T += t\n",
        "      #モダリティ\n",
        "      m = -v_list[l]*(2*(x23-x12)/h)*np.exp(-(((x23-x12)**4)/4))\n",
        "      M += m\n",
        "    return [T,M]\n",
        "\n",
        "def I_0(D,T,lam):#初期ver (本来はlamはいらないけど、他のIと合わせるために変数指定)\n",
        "    I = np.sqrt(D ** 2 + T ** 2)\n",
        "    return I\n",
        "\n",
        "def I_1(D,T,lam):\n",
        "    I = D + T * lam\n",
        "    return I\n",
        "\n",
        "def I_2(D,T,lam):\n",
        "    I = D * lam + T\n",
        "    return I\n",
        "\n",
        "def S_0(D,T,M):\n",
        "    S = np.array(np.abs(M)) / np.sqrt(M ** 2 + D ** 2 + T ** 2)\n",
        "    return S\n",
        "\n",
        "def S_1(D,T,M):\n",
        "    S = np.array(np.abs(M)) / np.sqrt(D ** 2 + T ** 2)\n",
        "    return S\n",
        "\n",
        "I_function_map = {'I_0': I_0,'I_1': I_1,'I_2': I_2}\n",
        "S_function_map = {'S_0': S_0,'S_1': S_1}\n",
        "\n",
        "#lamに対して、Ｉの最小値と、そのときの音量比の組み合わせを計算するモジュール\n",
        "def lam_min(f1,f2,f3,lam,I_num,S_num):\n",
        "    D_list = []\n",
        "    T_list = []\n",
        "    M_list = []\n",
        "    I_list = []\n",
        "    S_list = []\n",
        "    for i in range(len(v_com)):\n",
        "      Da = D(f1,f2,f3,v_com[i][0],v_com[i][1],v_com[i][2],N,a,b,c,d,g)\n",
        "      Ta = TM(f1,f2,f3,v_com[i][0],v_com[i][1],v_com[i][2],N,e,h,g)[0]\n",
        "      Ma = TM(f1,f2,f3,v_com[i][0],v_com[i][1],v_com[i][2],N,e,h,g)[1]\n",
        "      Ia = I_num(Da,Ta,lam)\n",
        "      Sa = S_num(Da,Ta,Ma)\n",
        "\n",
        "      D_list.append(Da)\n",
        "      T_list.append(Ta)\n",
        "      M_list.append(Ma)\n",
        "      I_list.append(Ia)\n",
        "      S_list.append(Sa)\n",
        "\n",
        "    v_com_min = v_com[I_list.index(min(I_list))]\n",
        "    return(lam,v_com_min,min(I_list),T_list[I_list.index(min(I_list))],D_list[I_list.index(min(I_list))])\n",
        "\n",
        "#相関係数\n",
        "def reg(list1,list2):\n",
        "    s1=pd.Series(list1)\n",
        "    s2=pd.Series(list2)\n",
        "    r=s1.corr(s2)\n",
        "    return r\n",
        "\n",
        "#csvファイルを出力するモジュール\n",
        "def export_csv(hyo, name):\n",
        "    jst_now = datetime.now(ZoneInfo(\"Asia/Tokyo\"))\n",
        "    now_str = jst_now.strftime(\"%Y%m%d_%H%M%S\")\n",
        "    filename = f\"{name}_{now_str}.csv\"\n",
        "    hyo.to_csv(filename, index=False, encoding=\"utf-8-sig\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1.第一音程（固定）と第二音程（変数）のTMグラフ"
      ],
      "metadata": {
        "id": "Tau1MctVpVB0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#緊張度 T\n",
        "\n",
        "# f1とf2の設定\n",
        "f1 = kenban_list[39]\n",
        "f2 = kenban_list[42]\n",
        "\n",
        "v1 = 1\n",
        "v2 = 1\n",
        "v3 = 1\n",
        "\n",
        "\n",
        "# f3を動かす範囲\n",
        "f3max = kenban_list[42] * ((2**(1/12))**(9))\n",
        "f3_list = np.linspace( f2 , f3max , 1000)\n",
        "\n",
        "# グラフを一枚に重ねる準備\n",
        "plt.figure()\n",
        "\n",
        "for N in [1, 2, 3, 4, 5, 6]:  # ここでN=1〜6で回す\n",
        "  xdata = []\n",
        "  ydata = []\n",
        "\n",
        "  for i in range(len(f3_list)):\n",
        "    f3 = f3_list[i]\n",
        "    Ta = TM(f1,f2,f3,v1,v2,v3,N,e,h,g)[0]\n",
        "\n",
        "    xdata.append((12*np.log2(f3/f2)))\n",
        "    ydata.append(Ta)\n",
        "\n",
        "    # plot\n",
        "  plt.plot(xdata, ydata)\n",
        "\n",
        "plt.xticks(range(10))\n",
        "plt.xlabel('2nd Interval')\n",
        "plt.ylabel('Tension(T)')\n",
        "plt.grid()\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DIk1LXneukaM",
        "outputId": "b1bbcc2d-c6c9-4f01-e1f1-766474026e13"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-47-1671012701>:37: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n",
            "  plt.legend()\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#モダリティ M\n",
        "\n",
        "# f1とf2の設定\n",
        "f1 = kenban_list[39]\n",
        "f2 = kenban_list[42]\n",
        "\n",
        "v1 = 1\n",
        "v2 = 1\n",
        "v3 = 1\n",
        "\n",
        "\n",
        "# f3を動かす範囲\n",
        "f3max = kenban_list[42] * ((2**(1/12))**(9))\n",
        "f3_list = np.linspace( f2 , f3max , 1000)\n",
        "\n",
        "# グラフを一枚に重ねる準備\n",
        "plt.figure()\n",
        "\n",
        "for N in [1, 2, 3, 4, 5, 6]:  # ここでN=1〜6で回す\n",
        "  xdata = []\n",
        "  ydata = []\n",
        "\n",
        "  for i in range(len(f3_list)):\n",
        "    f3 = f3_list[i]\n",
        "    Ma = TM(f1,f2,f3,v1,v2,v3,N,e,h,g)[1]\n",
        "\n",
        "    xdata.append((12*np.log2(f3/f2)))\n",
        "    ydata.append(Ma)\n",
        "\n",
        "    # plot\n",
        "  plt.plot(xdata, ydata)\n",
        "\n",
        "plt.xticks(range(10))\n",
        "plt.xlabel('2nd Interval')\n",
        "plt.ylabel('Tension(T)')\n",
        "plt.grid()\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dbc7fafb-949f-4cbf-a1b0-918e70da39c0",
        "id": "JfecJ2Gk1_Tn"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-46-2845636160>:37: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n",
            "  plt.legend()\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2.ISグラフ(相関関係)のε近傍の点"
      ],
      "metadata": {
        "id": "EwaYiflKKfjT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "v1 = 1\n",
        "v2 = 1\n",
        "v3 = 1\n",
        "I_num = I_0\n",
        "S_num = S_0\n",
        "lam = 0.5\n",
        "\n",
        "D_list = []\n",
        "T_list = []\n",
        "M_list = []\n",
        "I_list = []\n",
        "S_list = []\n",
        "\n",
        "for i in range(len(C_chord_list)):\n",
        "\n",
        "  f1 = C_chord_list[i][0]\n",
        "  f2 = C_chord_list[i][1]\n",
        "  f3 = C_chord_list[i][2]\n",
        "\n",
        "  Da = D(f1,f2,f3,v1,v2,v3,N,a,b,c,d,g)\n",
        "  Ta = TM(f1,f2,f3,v1,v2,v3,N,e,h,g)[0]\n",
        "  Ma = TM(f1,f2,f3,v1,v2,v3,N,e,h,g)[1]\n",
        "  Ia = I_num(Da,Ta,lam)\n",
        "  Sa = S_num(Da,Ta,Ma)\n",
        "\n",
        "  D_list.append(Da)\n",
        "  T_list.append(Ta)\n",
        "  M_list.append(Ma)\n",
        "  I_list.append(Ia)\n",
        "  S_list.append(Sa)"
      ],
      "metadata": {
        "id": "nBnQHFRcKwMh",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 217
        },
        "outputId": "8a3c3453-7f37-4092-da76-f8486efcf293"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'I_0' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-1-1501706595.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mv2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mv3\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mI_num\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mI_0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mS_num\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mS_0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mlam\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0.5\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'I_0' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "e=0.1     #εの値を設定\n",
        "\n",
        "# コードの種類を抽出（\"Cmaj_0\" → \"Cmaj\"）\n",
        "C_type_list = [name.split('_')[0] for name in C_name_list]\n",
        "\n",
        "# 種類に対して色を割り当てる\n",
        "color_map = {\n",
        "    'Cmaj': 'blue',\n",
        "    'Cmin': 'red',\n",
        "    'Caug': 'green',\n",
        "    'Csus4': 'orange',\n",
        "    'Cflat5': 'purple',\n",
        "    'Cdim': 'brown'\n",
        "}\n",
        "\n",
        "x = np.array(I_list).reshape(-1, 1)\n",
        "y = np.array(S_list)\n",
        "\n",
        "# 線形回帰\n",
        "model_lr = LinearRegression()\n",
        "model_lr.fit(x, y)\n",
        "y_pred = model_lr.predict(x)\n",
        "\n",
        "for i in range(len(x)):\n",
        "    label = C_type_list[i]\n",
        "    color = color_map.get(label, 'gray')  # default color if type not found\n",
        "    plt.scatter(x[i], y[i], color=color, label=label if i == C_type_list.index(label) else \"\")  # avoid duplicate labels\n",
        "\n",
        "# 回帰線と±ε帯\n",
        "plt.plot(x, y_pred, color='black', label='Regression line')\n",
        "plt.plot(x, y_pred + e , color='black', linewidth=0.8)\n",
        "plt.plot(x, y_pred - e, color='black', linewidth=0.8)\n",
        "\n",
        "plt.xlabel('huanteido (I)')\n",
        "plt.ylabel('anteido (S)')\n",
        "plt.ylim(0)\n",
        "plt.grid()\n",
        "plt.legend()\n",
        "plt.title('I-S relationship by chord type')\n",
        "plt.show()\n",
        "\n",
        "#ε近傍内の点[I,S]を抽出\n",
        "eS_list=[]\n",
        "for i in range(len(S_list)):\n",
        " if model_lr.predict(x[[i]])-e<=S_list[i]<=model_lr.predict(x[[i]])+e :\n",
        "  eS_list.append(S_list[i])\n",
        "\n",
        "#抽出した点はSリストでは何番目か\n",
        "index_list=[S_list.index(eS_list[i]) for i in range(len(eS_list))]\n",
        "\n",
        "#その順番のときの第1音程、第２音程を抽出\n",
        "ef123_list=[C_name_list[i] for i in index_list]\n",
        "\n",
        "print(\"ε近傍内の音程\",ef123_list)\n",
        "\n",
        "#相関係数\n",
        "print(\"相関係数\",reg(I_list,S_list))"
      ],
      "metadata": {
        "id": "HGq4W_x6hY-A"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 3.任意のlamに対するIの最小値の検討\n",
        "\n"
      ],
      "metadata": {
        "id": "MYIwaPoCHKYx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#周波数(Cmaj)の定義\n",
        "f1 = kenban_list[39]   #4C\n",
        "f2 = kenban_list[43]   #4E\n",
        "f3 = kenban_list[46]   #4G"
      ],
      "metadata": {
        "id": "N8lhuVWMLquK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#初期Ｉ\n",
        "lam_min_list=[]\n",
        "for i in range(0,101):\n",
        "  lam_min_list.append(lam_min(f1,f2,f3,i*0.1,I_0,S_1))\n",
        "\n",
        "Hyolist = [[] for _ in range(0,101)]\n",
        "for i in range(0,101):\n",
        "    Hyolist[i].append(lam_min_list[i][0])\n",
        "    Hyolist[i].append(lam_min_list[i][1][0])\n",
        "    Hyolist[i].append(lam_min_list[i][1][1])\n",
        "    Hyolist[i].append(lam_min_list[i][1][2])\n",
        "    Hyolist[i].append(lam_min_list[i][2])\n",
        "hyo = pd.DataFrame(Hyolist)\n",
        "hyo.columns = ['lam','v1','v2','v3','min',]\n",
        "hyo\n",
        "\n",
        "#export_csv(hyo, \"lam_min_I_0\") #csvファイル出力"
      ],
      "metadata": {
        "id": "HkcE2XmBMY7P",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "outputId": "90d1a289-91a7-4dc8-f1ce-ed128917ef14"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      lam   v1   v2   v3       min\n",
              "0     0.0  0.8  0.1  0.1  0.446826\n",
              "1     0.1  0.8  0.1  0.1  0.446826\n",
              "2     0.2  0.8  0.1  0.1  0.446826\n",
              "3     0.3  0.8  0.1  0.1  0.446826\n",
              "4     0.4  0.8  0.1  0.1  0.446826\n",
              "..    ...  ...  ...  ...       ...\n",
              "96    9.6  0.8  0.1  0.1  0.446826\n",
              "97    9.7  0.8  0.1  0.1  0.446826\n",
              "98    9.8  0.8  0.1  0.1  0.446826\n",
              "99    9.9  0.8  0.1  0.1  0.446826\n",
              "100  10.0  0.8  0.1  0.1  0.446826\n",
              "\n",
              "[101 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a465e996-7770-41ff-9b10-9d6c4b5b4ef0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lam</th>\n",
              "      <th>v1</th>\n",
              "      <th>v2</th>\n",
              "      <th>v3</th>\n",
              "      <th>min</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.446826</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.1</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.446826</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.2</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.446826</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.3</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.446826</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.4</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.446826</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>9.6</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.446826</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>9.7</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.446826</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>9.8</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.446826</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>9.9</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.446826</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>100</th>\n",
              "      <td>10.0</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.446826</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>101 rows × 5 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a465e996-7770-41ff-9b10-9d6c4b5b4ef0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a465e996-7770-41ff-9b10-9d6c4b5b4ef0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a465e996-7770-41ff-9b10-9d6c4b5b4ef0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-8378b6f8-90ad-4f32-a41d-22a794521336\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8378b6f8-90ad-4f32-a41d-22a794521336')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-8378b6f8-90ad-4f32-a41d-22a794521336 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_b5203dd0-e40f-4291-9852-c18e37ff1de6\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('hyo')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_b5203dd0-e40f-4291-9852-c18e37ff1de6 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('hyo');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "hyo",
              "summary": "{\n  \"name\": \"hyo\",\n  \"rows\": 101,\n  \"fields\": [\n    {\n      \"column\": \"lam\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.930017064796723,\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 101,\n        \"samples\": [\n          8.4,\n          5.5,\n          6.6000000000000005\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"v1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6736404963781187e-15,\n        \"min\": 0.8,\n        \"max\": 0.8,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"v2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0920506204726484e-16,\n        \"min\": 0.1,\n        \"max\": 0.1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"v3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0920506204726484e-16,\n        \"min\": 0.1,\n        \"max\": 0.1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.463041323674983e-16,\n        \"min\": 0.4468259499315462,\n        \"max\": 0.4468259499315462,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.4468259499315462\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# I = D + T * lam\n",
        "lam_min_list=[]\n",
        "for i in range(0,101):\n",
        "  lam_min_list.append(lam_min(f1,f2,f3,i*0.1,I_1,S_1))\n",
        "\n",
        "Hyolist = [[] for _ in range(0,101)]\n",
        "for i in range(0,101):\n",
        "    Hyolist[i].append(lam_min_list[i][0])\n",
        "    Hyolist[i].append(lam_min_list[i][1][0])\n",
        "    Hyolist[i].append(lam_min_list[i][1][1])\n",
        "    Hyolist[i].append(lam_min_list[i][1][2])\n",
        "    Hyolist[i].append(lam_min_list[i][2])\n",
        "    Hyolist[i].append(lam_min_list[i][3])\n",
        "    Hyolist[i].append(lam_min_list[i][4])\n",
        "hyo = pd.DataFrame(Hyolist)\n",
        "hyo.columns = ['lam','v1','v2','v3','min','T','D']\n",
        "hyo\n",
        "\n",
        "#export_csv(hyo, \"lam_min_I_1\") #csvファイル出力"
      ],
      "metadata": {
        "id": "srXSgpeM5jfN",
        "collapsed": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "outputId": "e5e42383-2a91-489c-9f2c-29ddcd2b984e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      lam   v1   v2   v3       min         T         D\n",
              "0     0.0  0.8  0.1  0.1  0.265705  0.359241  0.265705\n",
              "1     0.1  0.8  0.1  0.1  0.301630  0.359241  0.265705\n",
              "2     0.2  0.8  0.1  0.1  0.337554  0.359241  0.265705\n",
              "3     0.3  0.8  0.1  0.1  0.373478  0.359241  0.265705\n",
              "4     0.4  0.8  0.1  0.1  0.409402  0.359241  0.265705\n",
              "..    ...  ...  ...  ...       ...       ...       ...\n",
              "96    9.6  0.8  0.1  0.1  3.714419  0.359241  0.265705\n",
              "97    9.7  0.8  0.1  0.1  3.750343  0.359241  0.265705\n",
              "98    9.8  0.8  0.1  0.1  3.786267  0.359241  0.265705\n",
              "99    9.9  0.8  0.1  0.1  3.822191  0.359241  0.265705\n",
              "100  10.0  0.8  0.1  0.1  3.858115  0.359241  0.265705\n",
              "\n",
              "[101 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7bc22e62-2a02-47d6-82d8-291431bbc671\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lam</th>\n",
              "      <th>v1</th>\n",
              "      <th>v2</th>\n",
              "      <th>v3</th>\n",
              "      <th>min</th>\n",
              "      <th>T</th>\n",
              "      <th>D</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.265705</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.1</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.301630</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.2</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.337554</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.3</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.373478</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.4</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.409402</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>9.6</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>3.714419</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>9.7</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>3.750343</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>9.8</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>3.786267</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>9.9</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>3.822191</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>100</th>\n",
              "      <td>10.0</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>3.858115</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>101 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7bc22e62-2a02-47d6-82d8-291431bbc671')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7bc22e62-2a02-47d6-82d8-291431bbc671 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7bc22e62-2a02-47d6-82d8-291431bbc671');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-5fb931bf-3a12-441f-be7f-2b1733e16c75\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5fb931bf-3a12-441f-be7f-2b1733e16c75')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-5fb931bf-3a12-441f-be7f-2b1733e16c75 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_dcda5aa8-53fb-4f27-aad7-a2579fab052b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('hyo')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_dcda5aa8-53fb-4f27-aad7-a2579fab052b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('hyo');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "hyo",
              "summary": "{\n  \"name\": \"hyo\",\n  \"rows\": 101,\n  \"fields\": [\n    {\n      \"column\": \"lam\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.930017064796723,\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 101,\n        \"samples\": [\n          8.4,\n          5.5,\n          6.6000000000000005\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"v1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6736404963781187e-15,\n        \"min\": 0.8,\n        \"max\": 0.8,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"v2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0920506204726484e-16,\n        \"min\": 0.1,\n        \"max\": 0.1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"v3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0920506204726484e-16,\n        \"min\": 0.1,\n        \"max\": 0.1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0525821233663912,\n        \"min\": 0.26570541403517584,\n        \"max\": 3.8581149464329565,\n        \"num_unique_values\": 101,\n        \"samples\": [\n          3.283329421249312\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.136681820053102e-16,\n        \"min\": 0.35924095323977806,\n        \"max\": 0.35924095323977806,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.35924095323977806\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"D\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.3472809927562376e-16,\n        \"min\": 0.26570541403517584,\n        \"max\": 0.26570541403517584,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.26570541403517584\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# I = D + T * lam\n",
        "lam_min_list=[]\n",
        "for i in range(0,101):\n",
        "  lam_min_list.append(lam_min(f1,f2,f3,i*0.1,I_2,S_1))\n",
        "\n",
        "Hyolist = [[] for _ in range(0,101)]\n",
        "for i in range(0,101):\n",
        "    Hyolist[i].append(lam_min_list[i][0])\n",
        "    Hyolist[i].append(lam_min_list[i][1][0])\n",
        "    Hyolist[i].append(lam_min_list[i][1][1])\n",
        "    Hyolist[i].append(lam_min_list[i][1][2])\n",
        "    Hyolist[i].append(lam_min_list[i][2])\n",
        "    Hyolist[i].append(lam_min_list[i][3])\n",
        "    Hyolist[i].append(lam_min_list[i][4])\n",
        "hyo = pd.DataFrame(Hyolist)\n",
        "hyo.columns = ['lam','v1','v2','v3','min','T','D']\n",
        "hyo\n",
        "\n",
        "#export_csv(hyo, \"lam_min_I_1\") #csvファイル出力"
      ],
      "metadata": {
        "collapsed": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "outputId": "f3c036d1-57ab-4b59-ec68-5e676328429a",
        "id": "U-mat_3JEI4n"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      lam   v1   v2   v3       min         T         D\n",
              "0     0.0  0.1  0.1  0.8  0.359241  0.359241  0.304322\n",
              "1     0.1  0.8  0.1  0.1  0.385811  0.359241  0.265705\n",
              "2     0.2  0.8  0.1  0.1  0.412382  0.359241  0.265705\n",
              "3     0.3  0.8  0.1  0.1  0.438953  0.359241  0.265705\n",
              "4     0.4  0.8  0.1  0.1  0.465523  0.359241  0.265705\n",
              "..    ...  ...  ...  ...       ...       ...       ...\n",
              "96    9.6  0.8  0.1  0.1  2.910013  0.359241  0.265705\n",
              "97    9.7  0.8  0.1  0.1  2.936583  0.359241  0.265705\n",
              "98    9.8  0.8  0.1  0.1  2.963154  0.359241  0.265705\n",
              "99    9.9  0.8  0.1  0.1  2.989725  0.359241  0.265705\n",
              "100  10.0  0.8  0.1  0.1  3.016295  0.359241  0.265705\n",
              "\n",
              "[101 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6d52c29c-229f-4615-8be6-65d362f8f2c5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lam</th>\n",
              "      <th>v1</th>\n",
              "      <th>v2</th>\n",
              "      <th>v3</th>\n",
              "      <th>min</th>\n",
              "      <th>T</th>\n",
              "      <th>D</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.304322</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.1</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.385811</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.2</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.412382</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.3</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.438953</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.4</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.465523</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>9.6</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>2.910013</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>9.7</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>2.936583</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>9.8</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>2.963154</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>9.9</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>2.989725</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>100</th>\n",
              "      <td>10.0</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>3.016295</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>101 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6d52c29c-229f-4615-8be6-65d362f8f2c5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6d52c29c-229f-4615-8be6-65d362f8f2c5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6d52c29c-229f-4615-8be6-65d362f8f2c5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-48791a52-d99e-48a9-8b14-aaa51a647df9\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-48791a52-d99e-48a9-8b14-aaa51a647df9')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-48791a52-d99e-48a9-8b14-aaa51a647df9 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_d37c43ed-3b96-4d0d-9ce2-b0069df98277\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('hyo')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d37c43ed-3b96-4d0d-9ce2-b0069df98277 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('hyo');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "hyo",
              "summary": "{\n  \"name\": \"hyo\",\n  \"rows\": 101,\n  \"fields\": [\n    {\n      \"column\": \"lam\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.930017064796723,\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 101,\n        \"samples\": [\n          8.4,\n          5.5,\n          6.6000000000000005\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"v1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06965260331469907,\n        \"min\": 0.1,\n        \"max\": 0.8,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.8,\n          0.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"v2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0920506204726484e-16,\n        \"min\": 0.1,\n        \"max\": 0.1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"v3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06965260331469923,\n        \"min\": 0.1,\n        \"max\": 0.8,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7785213973319437,\n        \"min\": 0.35924095323977806,\n        \"max\": 3.0162950935915362,\n        \"num_unique_values\": 101,\n        \"samples\": [\n          2.591166431135255\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.136681820053102e-16,\n        \"min\": 0.35924095323977806,\n        \"max\": 0.35924095323977806,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.35924095323977806\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"D\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.003842519320242503,\n        \"min\": 0.26570541403517584,\n        \"max\": 0.30432225527536705,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.26570541403517584\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# I = D + T * lam\n",
        "lam_min_list=[]\n",
        "for i in range(0,11):\n",
        "  lam_min_list.append(lam_min(f1,f2,f3,i*0.001,I_2,S_1))\n",
        "\n",
        "Hyolist = [[] for _ in range(0,11)]\n",
        "for i in range(0,11):\n",
        "    Hyolist[i].append(lam_min_list[i][0])\n",
        "    Hyolist[i].append(lam_min_list[i][1][0])\n",
        "    Hyolist[i].append(lam_min_list[i][1][1])\n",
        "    Hyolist[i].append(lam_min_list[i][1][2])\n",
        "    Hyolist[i].append(lam_min_list[i][2])\n",
        "    Hyolist[i].append(lam_min_list[i][3])\n",
        "    Hyolist[i].append(lam_min_list[i][4])\n",
        "hyo = pd.DataFrame(Hyolist)\n",
        "hyo.columns = ['lam','v1','v2','v3','min','T','D']\n",
        "hyo\n",
        "\n",
        "#export_csv(hyo, \"lam_min_I_1\") #csvファイル出力"
      ],
      "metadata": {
        "collapsed": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 390
        },
        "outputId": "51933082-6aec-45b5-9e31-11620d9365d4",
        "id": "_hitDc0MEXMy"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      lam   v1   v2   v3       min         T         D\n",
              "0   0.000  0.1  0.1  0.8  0.359241  0.359241  0.304322\n",
              "1   0.001  0.8  0.1  0.1  0.359507  0.359241  0.265705\n",
              "2   0.002  0.8  0.1  0.1  0.359772  0.359241  0.265705\n",
              "3   0.003  0.8  0.1  0.1  0.360038  0.359241  0.265705\n",
              "4   0.004  0.8  0.1  0.1  0.360304  0.359241  0.265705\n",
              "5   0.005  0.8  0.1  0.1  0.360569  0.359241  0.265705\n",
              "6   0.006  0.8  0.1  0.1  0.360835  0.359241  0.265705\n",
              "7   0.007  0.8  0.1  0.1  0.361101  0.359241  0.265705\n",
              "8   0.008  0.8  0.1  0.1  0.361367  0.359241  0.265705\n",
              "9   0.009  0.8  0.1  0.1  0.361632  0.359241  0.265705\n",
              "10  0.010  0.8  0.1  0.1  0.361898  0.359241  0.265705"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c0bc43e9-b5c7-44b3-953f-b73d52bcfeb6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lam</th>\n",
              "      <th>v1</th>\n",
              "      <th>v2</th>\n",
              "      <th>v3</th>\n",
              "      <th>min</th>\n",
              "      <th>T</th>\n",
              "      <th>D</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.000</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.304322</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.001</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.359507</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.002</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.359772</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.003</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.360038</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.004</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.360304</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0.005</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.360569</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0.006</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.360835</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0.007</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.361101</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0.008</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.361367</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0.009</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.361632</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>0.010</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.361898</td>\n",
              "      <td>0.359241</td>\n",
              "      <td>0.265705</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c0bc43e9-b5c7-44b3-953f-b73d52bcfeb6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c0bc43e9-b5c7-44b3-953f-b73d52bcfeb6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c0bc43e9-b5c7-44b3-953f-b73d52bcfeb6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-d6ec3f94-7428-4921-8c84-a0e91cf20246\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d6ec3f94-7428-4921-8c84-a0e91cf20246')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-d6ec3f94-7428-4921-8c84-a0e91cf20246 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_e3923496-e1ff-453e-88e4-22671def95e5\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('hyo')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_e3923496-e1ff-453e-88e4-22671def95e5 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('hyo');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "hyo",
              "summary": "{\n  \"name\": \"hyo\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"lam\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0033166247903554,\n        \"min\": 0.0,\n        \"max\": 0.01,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          0.005,\n          0.0,\n          0.009000000000000001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"v1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.21105794120443455,\n        \"min\": 0.1,\n        \"max\": 0.8,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.8,\n          0.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"v2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.4555146645863654e-17,\n        \"min\": 0.1,\n        \"max\": 0.1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"v3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.21105794120443455,\n        \"min\": 0.1,\n        \"max\": 0.8,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0008812451631207112,\n        \"min\": 0.35924095323977806,\n        \"max\": 0.36189800738012984,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          0.36056948030995395\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.35924095323977806,\n        \"max\": 0.35924095323977806,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.35924095323977806\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"D\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.01164341572567609,\n        \"min\": 0.26570541403517584,\n        \"max\": 0.30432225527536705,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.26570541403517584\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 4.任意のlamに対するDTMISの表出力"
      ],
      "metadata": {
        "id": "UQXagaSKHeXr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#周波数(Cmaj)の定義\n",
        "f1 = kenban_list[39]   #4C\n",
        "f2 = kenban_list[43]   #4E\n",
        "f3 = kenban_list[46]   #4G"
      ],
      "metadata": {
        "id": "P3DKIEswe_sf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for lam in range(0,11):\n",
        "  I_num = I_2\n",
        "  S_num = S_1\n",
        "  D_list = []\n",
        "  T_list = []\n",
        "  M_list = []\n",
        "  I_list = []\n",
        "  S_list = []\n",
        "\n",
        "  for i in range(len(v_com)):\n",
        "      Da = D(f1,f2,f3,v_com[i][0],v_com[i][1],v_com[i][2],N,a,b,c,d,g)\n",
        "      Ta = TM(f1,f2,f3,v_com[i][0],v_com[i][1],v_com[i][2],N,e,h,g)[0]\n",
        "      Ma = TM(f1,f2,f3,v_com[i][0],v_com[i][1],v_com[i][2],N,e,h,g)[1]\n",
        "      Ia = I_num(Da,Ta,lam)\n",
        "      Sa = S_num(Da,Ta,Ma)\n",
        "\n",
        "      D_list.append(Da)\n",
        "      T_list.append(Ta)\n",
        "      M_list.append(Ma)\n",
        "      I_list.append(Ia)\n",
        "      S_list.append(Sa)\n",
        "\n",
        "  Hyolist = [[] for _ in range(len(v_com))]\n",
        "  for i in range(len(v_com)):\n",
        "      Hyolist[i].append(lam)\n",
        "      Hyolist[i].append(v_com[i][0])\n",
        "      Hyolist[i].append(v_com[i][1])\n",
        "      Hyolist[i].append(v_com[i][2])\n",
        "      Hyolist[i].append(D_list[i])\n",
        "      Hyolist[i].append(T_list[i])\n",
        "      Hyolist[i].append(M_list[i])\n",
        "      Hyolist[i].append(I_list[i])\n",
        "      Hyolist[i].append(S_list[i])\n",
        "  hyo = pd.DataFrame(Hyolist)\n",
        "  hyo.columns = ['lam','v1','v2','v3','D','T','M','I','S']\n",
        "  print(hyo)"
      ],
      "metadata": {
        "id": "gEt5BvAffIey",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "43b783a8-39cb-4379-e117-80cedab7abd7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    lam   v1   v2   v3         D         T         M         I         S\n",
            "0     0  0.1  0.1  0.8  0.304322  0.359241  1.381825  0.359241  2.934968\n",
            "1     0  0.1  0.2  0.7  0.370264  0.432911  1.665197  0.432911  2.923167\n",
            "2     0  0.1  0.3  0.6  0.406881  0.470739  1.810703  0.470739  2.910107\n",
            "3     0  0.1  0.4  0.5  0.424457  0.487565  1.875425  0.487565  2.901162\n",
            "4     0  0.1  0.5  0.4  0.426078  0.487565  1.875425  0.487565  2.896390\n",
            "5     0  0.1  0.6  0.3  0.411806  0.470739  1.810703  0.470739  2.895071\n",
            "6     0  0.1  0.7  0.2  0.378717  0.432911  1.665197  0.432911  2.895060\n",
            "7     0  0.1  0.8  0.1  0.316873  0.359241  1.381825  0.359241  2.884675\n",
            "8     0  0.2  0.1  0.7  0.339595  0.432911  1.665197  0.432911  3.026448\n",
            "9     0  0.2  0.2  0.6  0.403463  0.518115  1.992936  0.518115  3.034878\n",
            "10    0  0.2  0.3  0.5  0.436242  0.558123  2.146825  0.558123  3.030596\n",
            "11    0  0.2  0.4  0.4  0.448042  0.570259  2.193510  0.570259  3.024634\n",
            "12    0  0.2  0.5  0.3  0.441135  0.558123  2.146825  0.558123  3.017716\n",
            "13    0  0.2  0.6  0.2  0.413513  0.518115  1.992936  0.518115  3.006392\n",
            "14    0  0.2  0.7  0.1  0.355571  0.432911  1.665197  0.432911  2.972415\n",
            "15    0  0.3  0.1  0.6  0.356701  0.470739  1.810703  0.470739  3.065773\n",
            "16    0  0.3  0.2  0.5  0.416353  0.558123  2.146825  0.558123  3.083136\n",
            "17    0  0.3  0.3  0.4  0.443121  0.593094  2.281342  0.593094  3.081443\n",
            "18    0  0.3  0.4  0.3  0.446307  0.593094  2.281342  0.593094  3.073509\n",
            "19    0  0.3  0.5  0.2  0.426124  0.558123  2.146825  0.558123  3.057291\n",
            "20    0  0.3  0.6  0.1  0.373934  0.470739  1.810703  0.470739  3.011895\n",
            "21    0  0.4  0.1  0.5  0.361882  0.487565  1.875425  0.487565  3.088702\n",
            "22    0  0.4  0.2  0.4  0.415255  0.570259  2.193510  0.570259  3.109461\n",
            "23    0  0.4  0.3  0.3  0.433319  0.593094  2.281342  0.593094  3.105879\n",
            "24    0  0.4  0.4  0.2  0.423298  0.570259  2.193510  0.570259  3.088603\n",
            "25    0  0.4  0.5  0.1  0.378851  0.487565  1.875425  0.487565  3.037357\n",
            "26    0  0.5  0.1  0.4  0.356896  0.487565  1.875425  0.487565  3.103824\n",
            "27    0  0.5  0.2  0.3  0.401299  0.558123  2.146825  0.558123  3.123034\n",
            "28    0  0.5  0.3  0.2  0.406177  0.558123  2.146825  0.558123  3.110098\n",
            "29    0  0.5  0.4  0.1  0.372245  0.487565  1.875425  0.487565  3.057318\n",
            "30    0  0.6  0.1  0.3  0.341548  0.470739  1.810703  0.470739  3.113351\n",
            "31    0  0.6  0.2  0.2  0.372540  0.518115  1.992936  0.518115  3.123013\n",
            "32    0  0.6  0.3  0.1  0.353857  0.470739  1.810703  0.470739  3.074691\n",
            "33    0  0.7  0.1  0.2  0.313585  0.432911  1.665197  0.432911  3.115119\n",
            "34    0  0.7  0.2  0.1  0.321107  0.432911  1.665197  0.432911  3.089415\n",
            "35    0  0.8  0.1  0.1  0.265705  0.359241  1.381825  0.359241  3.092535\n",
            "    lam   v1   v2   v3         D         T         M         I         S\n",
            "0     1  0.1  0.1  0.8  0.304322  0.359241  1.381825  0.663563  2.934968\n",
            "1     1  0.1  0.2  0.7  0.370264  0.432911  1.665197  0.803174  2.923167\n",
            "2     1  0.1  0.3  0.6  0.406881  0.470739  1.810703  0.877620  2.910107\n",
            "3     1  0.1  0.4  0.5  0.424457  0.487565  1.875425  0.912022  2.901162\n",
            "4     1  0.1  0.5  0.4  0.426078  0.487565  1.875425  0.913643  2.896390\n",
            "5     1  0.1  0.6  0.3  0.411806  0.470739  1.810703  0.882545  2.895071\n",
            "6     1  0.1  0.7  0.2  0.378717  0.432911  1.665197  0.811628  2.895060\n",
            "7     1  0.1  0.8  0.1  0.316873  0.359241  1.381825  0.676114  2.884675\n",
            "8     1  0.2  0.1  0.7  0.339595  0.432911  1.665197  0.772506  3.026448\n",
            "9     1  0.2  0.2  0.6  0.403463  0.518115  1.992936  0.921578  3.034878\n",
            "10    1  0.2  0.3  0.5  0.436242  0.558123  2.146825  0.994364  3.030596\n",
            "11    1  0.2  0.4  0.4  0.448042  0.570259  2.193510  1.018301  3.024634\n",
            "12    1  0.2  0.5  0.3  0.441135  0.558123  2.146825  0.999257  3.017716\n",
            "13    1  0.2  0.6  0.2  0.413513  0.518115  1.992936  0.931628  3.006392\n",
            "14    1  0.2  0.7  0.1  0.355571  0.432911  1.665197  0.788482  2.972415\n",
            "15    1  0.3  0.1  0.6  0.356701  0.470739  1.810703  0.827440  3.065773\n",
            "16    1  0.3  0.2  0.5  0.416353  0.558123  2.146825  0.974476  3.083136\n",
            "17    1  0.3  0.3  0.4  0.443121  0.593094  2.281342  1.036215  3.081443\n",
            "18    1  0.3  0.4  0.3  0.446307  0.593094  2.281342  1.039400  3.073509\n",
            "19    1  0.3  0.5  0.2  0.426124  0.558123  2.146825  0.984247  3.057291\n",
            "20    1  0.3  0.6  0.1  0.373934  0.470739  1.810703  0.844673  3.011895\n",
            "21    1  0.4  0.1  0.5  0.361882  0.487565  1.875425  0.849447  3.088702\n",
            "22    1  0.4  0.2  0.4  0.415255  0.570259  2.193510  0.985515  3.109461\n",
            "23    1  0.4  0.3  0.3  0.433319  0.593094  2.281342  1.026413  3.105879\n",
            "24    1  0.4  0.4  0.2  0.423298  0.570259  2.193510  0.993557  3.088603\n",
            "25    1  0.4  0.5  0.1  0.378851  0.487565  1.875425  0.866416  3.037357\n",
            "26    1  0.5  0.1  0.4  0.356896  0.487565  1.875425  0.844461  3.103824\n",
            "27    1  0.5  0.2  0.3  0.401299  0.558123  2.146825  0.959421  3.123034\n",
            "28    1  0.5  0.3  0.2  0.406177  0.558123  2.146825  0.964300  3.110098\n",
            "29    1  0.5  0.4  0.1  0.372245  0.487565  1.875425  0.859810  3.057318\n",
            "30    1  0.6  0.1  0.3  0.341548  0.470739  1.810703  0.812287  3.113351\n",
            "31    1  0.6  0.2  0.2  0.372540  0.518115  1.992936  0.890655  3.123013\n",
            "32    1  0.6  0.3  0.1  0.353857  0.470739  1.810703  0.824596  3.074691\n",
            "33    1  0.7  0.1  0.2  0.313585  0.432911  1.665197  0.746496  3.115119\n",
            "34    1  0.7  0.2  0.1  0.321107  0.432911  1.665197  0.754018  3.089415\n",
            "35    1  0.8  0.1  0.1  0.265705  0.359241  1.381825  0.624946  3.092535\n",
            "    lam   v1   v2   v3         D         T         M         I         S\n",
            "0     2  0.1  0.1  0.8  0.304322  0.359241  1.381825  0.967885  2.934968\n",
            "1     2  0.1  0.2  0.7  0.370264  0.432911  1.665197  1.173438  2.923167\n",
            "2     2  0.1  0.3  0.6  0.406881  0.470739  1.810703  1.284502  2.910107\n",
            "3     2  0.1  0.4  0.5  0.424457  0.487565  1.875425  1.336480  2.901162\n",
            "4     2  0.1  0.5  0.4  0.426078  0.487565  1.875425  1.339721  2.896390\n",
            "5     2  0.1  0.6  0.3  0.411806  0.470739  1.810703  1.294351  2.895071\n",
            "6     2  0.1  0.7  0.2  0.378717  0.432911  1.665197  1.190345  2.895060\n",
            "7     2  0.1  0.8  0.1  0.316873  0.359241  1.381825  0.992987  2.884675\n",
            "8     2  0.2  0.1  0.7  0.339595  0.432911  1.665197  1.112101  3.026448\n",
            "9     2  0.2  0.2  0.6  0.403463  0.518115  1.992936  1.325040  3.034878\n",
            "10    2  0.2  0.3  0.5  0.436242  0.558123  2.146825  1.430606  3.030596\n",
            "11    2  0.2  0.4  0.4  0.448042  0.570259  2.193510  1.466342  3.024634\n",
            "12    2  0.2  0.5  0.3  0.441135  0.558123  2.146825  1.440392  3.017716\n",
            "13    2  0.2  0.6  0.2  0.413513  0.518115  1.992936  1.345140  3.006392\n",
            "14    2  0.2  0.7  0.1  0.355571  0.432911  1.665197  1.144054  2.972415\n",
            "15    2  0.3  0.1  0.6  0.356701  0.470739  1.810703  1.184140  3.065773\n",
            "16    2  0.3  0.2  0.5  0.416353  0.558123  2.146825  1.390829  3.083136\n",
            "17    2  0.3  0.3  0.4  0.443121  0.593094  2.281342  1.479336  3.081443\n",
            "18    2  0.3  0.4  0.3  0.446307  0.593094  2.281342  1.485707  3.073509\n",
            "19    2  0.3  0.5  0.2  0.426124  0.558123  2.146825  1.410371  3.057291\n",
            "20    2  0.3  0.6  0.1  0.373934  0.470739  1.810703  1.218608  3.011895\n",
            "21    2  0.4  0.1  0.5  0.361882  0.487565  1.875425  1.211329  3.088702\n",
            "22    2  0.4  0.2  0.4  0.415255  0.570259  2.193510  1.400770  3.109461\n",
            "23    2  0.4  0.3  0.3  0.433319  0.593094  2.281342  1.459732  3.105879\n",
            "24    2  0.4  0.4  0.2  0.423298  0.570259  2.193510  1.416855  3.088603\n",
            "25    2  0.4  0.5  0.1  0.378851  0.487565  1.875425  1.245268  3.037357\n",
            "26    2  0.5  0.1  0.4  0.356896  0.487565  1.875425  1.201357  3.103824\n",
            "27    2  0.5  0.2  0.3  0.401299  0.558123  2.146825  1.360720  3.123034\n",
            "28    2  0.5  0.3  0.2  0.406177  0.558123  2.146825  1.370477  3.110098\n",
            "29    2  0.5  0.4  0.1  0.372245  0.487565  1.875425  1.232055  3.057318\n",
            "30    2  0.6  0.1  0.3  0.341548  0.470739  1.810703  1.153835  3.113351\n",
            "31    2  0.6  0.2  0.2  0.372540  0.518115  1.992936  1.263196  3.123013\n",
            "32    2  0.6  0.3  0.1  0.353857  0.470739  1.810703  1.178453  3.074691\n",
            "33    2  0.7  0.1  0.2  0.313585  0.432911  1.665197  1.060080  3.115119\n",
            "34    2  0.7  0.2  0.1  0.321107  0.432911  1.665197  1.075126  3.089415\n",
            "35    2  0.8  0.1  0.1  0.265705  0.359241  1.381825  0.890652  3.092535\n",
            "    lam   v1   v2   v3         D         T         M         I         S\n",
            "0     3  0.1  0.1  0.8  0.304322  0.359241  1.381825  1.272208  2.934968\n",
            "1     3  0.1  0.2  0.7  0.370264  0.432911  1.665197  1.543702  2.923167\n",
            "2     3  0.1  0.3  0.6  0.406881  0.470739  1.810703  1.691383  2.910107\n",
            "3     3  0.1  0.4  0.5  0.424457  0.487565  1.875425  1.760937  2.901162\n",
            "4     3  0.1  0.5  0.4  0.426078  0.487565  1.875425  1.765798  2.896390\n",
            "5     3  0.1  0.6  0.3  0.411806  0.470739  1.810703  1.706157  2.895071\n",
            "6     3  0.1  0.7  0.2  0.378717  0.432911  1.665197  1.569063  2.895060\n",
            "7     3  0.1  0.8  0.1  0.316873  0.359241  1.381825  1.309861  2.884675\n",
            "8     3  0.2  0.1  0.7  0.339595  0.432911  1.665197  1.451696  3.026448\n",
            "9     3  0.2  0.2  0.6  0.403463  0.518115  1.992936  1.728503  3.034878\n",
            "10    3  0.2  0.3  0.5  0.436242  0.558123  2.146825  1.866848  3.030596\n",
            "11    3  0.2  0.4  0.4  0.448042  0.570259  2.193510  1.914384  3.024634\n",
            "12    3  0.2  0.5  0.3  0.441135  0.558123  2.146825  1.881527  3.017716\n",
            "13    3  0.2  0.6  0.2  0.413513  0.518115  1.992936  1.758653  3.006392\n",
            "14    3  0.2  0.7  0.1  0.355571  0.432911  1.665197  1.499625  2.972415\n",
            "15    3  0.3  0.1  0.6  0.356701  0.470739  1.810703  1.540841  3.065773\n",
            "16    3  0.3  0.2  0.5  0.416353  0.558123  2.146825  1.807182  3.083136\n",
            "17    3  0.3  0.3  0.4  0.443121  0.593094  2.281342  1.922457  3.081443\n",
            "18    3  0.3  0.4  0.3  0.446307  0.593094  2.281342  1.932014  3.073509\n",
            "19    3  0.3  0.5  0.2  0.426124  0.558123  2.146825  1.836496  3.057291\n",
            "20    3  0.3  0.6  0.1  0.373934  0.470739  1.810703  1.592542  3.011895\n",
            "21    3  0.4  0.1  0.5  0.361882  0.487565  1.875425  1.573210  3.088702\n",
            "22    3  0.4  0.2  0.4  0.415255  0.570259  2.193510  1.816026  3.109461\n",
            "23    3  0.4  0.3  0.3  0.433319  0.593094  2.281342  1.893051  3.105879\n",
            "24    3  0.4  0.4  0.2  0.423298  0.570259  2.193510  1.840152  3.088603\n",
            "25    3  0.4  0.5  0.1  0.378851  0.487565  1.875425  1.624119  3.037357\n",
            "26    3  0.5  0.1  0.4  0.356896  0.487565  1.875425  1.558253  3.103824\n",
            "27    3  0.5  0.2  0.3  0.401299  0.558123  2.146825  1.762019  3.123034\n",
            "28    3  0.5  0.3  0.2  0.406177  0.558123  2.146825  1.776655  3.110098\n",
            "29    3  0.5  0.4  0.1  0.372245  0.487565  1.875425  1.604301  3.057318\n",
            "30    3  0.6  0.1  0.3  0.341548  0.470739  1.810703  1.495384  3.113351\n",
            "31    3  0.6  0.2  0.2  0.372540  0.518115  1.992936  1.635736  3.123013\n",
            "32    3  0.6  0.3  0.1  0.353857  0.470739  1.810703  1.532310  3.074691\n",
            "33    3  0.7  0.1  0.2  0.313585  0.432911  1.665197  1.373665  3.115119\n",
            "34    3  0.7  0.2  0.1  0.321107  0.432911  1.665197  1.396233  3.089415\n",
            "35    3  0.8  0.1  0.1  0.265705  0.359241  1.381825  1.156357  3.092535\n",
            "    lam   v1   v2   v3         D         T         M         I         S\n",
            "0     4  0.1  0.1  0.8  0.304322  0.359241  1.381825  1.576530  2.934968\n",
            "1     4  0.1  0.2  0.7  0.370264  0.432911  1.665197  1.913965  2.923167\n",
            "2     4  0.1  0.3  0.6  0.406881  0.470739  1.810703  2.098264  2.910107\n",
            "3     4  0.1  0.4  0.5  0.424457  0.487565  1.875425  2.185394  2.901162\n",
            "4     4  0.1  0.5  0.4  0.426078  0.487565  1.875425  2.191876  2.896390\n",
            "5     4  0.1  0.6  0.3  0.411806  0.470739  1.810703  2.117963  2.895071\n",
            "6     4  0.1  0.7  0.2  0.378717  0.432911  1.665197  1.947780  2.895060\n",
            "7     4  0.1  0.8  0.1  0.316873  0.359241  1.381825  1.626734  2.884675\n",
            "8     4  0.2  0.1  0.7  0.339595  0.432911  1.665197  1.791291  3.026448\n",
            "9     4  0.2  0.2  0.6  0.403463  0.518115  1.992936  2.131965  3.034878\n",
            "10    4  0.2  0.3  0.5  0.436242  0.558123  2.146825  2.303090  3.030596\n",
            "11    4  0.2  0.4  0.4  0.448042  0.570259  2.193510  2.362426  3.024634\n",
            "12    4  0.2  0.5  0.3  0.441135  0.558123  2.146825  2.322661  3.017716\n",
            "13    4  0.2  0.6  0.2  0.413513  0.518115  1.992936  2.172166  3.006392\n",
            "14    4  0.2  0.7  0.1  0.355571  0.432911  1.665197  1.855197  2.972415\n",
            "15    4  0.3  0.1  0.6  0.356701  0.470739  1.810703  1.897542  3.065773\n",
            "16    4  0.3  0.2  0.5  0.416353  0.558123  2.146825  2.223535  3.083136\n",
            "17    4  0.3  0.3  0.4  0.443121  0.593094  2.281342  2.365578  3.081443\n",
            "18    4  0.3  0.4  0.3  0.446307  0.593094  2.281342  2.378321  3.073509\n",
            "19    4  0.3  0.5  0.2  0.426124  0.558123  2.146825  2.262620  3.057291\n",
            "20    4  0.3  0.6  0.1  0.373934  0.470739  1.810703  1.966476  3.011895\n",
            "21    4  0.4  0.1  0.5  0.361882  0.487565  1.875425  1.935092  3.088702\n",
            "22    4  0.4  0.2  0.4  0.415255  0.570259  2.193510  2.231281  3.109461\n",
            "23    4  0.4  0.3  0.3  0.433319  0.593094  2.281342  2.326370  3.105879\n",
            "24    4  0.4  0.4  0.2  0.423298  0.570259  2.193510  2.263450  3.088603\n",
            "25    4  0.4  0.5  0.1  0.378851  0.487565  1.875425  2.002971  3.037357\n",
            "26    4  0.5  0.1  0.4  0.356896  0.487565  1.875425  1.915149  3.103824\n",
            "27    4  0.5  0.2  0.3  0.401299  0.558123  2.146825  2.163318  3.123034\n",
            "28    4  0.5  0.3  0.2  0.406177  0.558123  2.146825  2.182832  3.110098\n",
            "29    4  0.5  0.4  0.1  0.372245  0.487565  1.875425  1.976546  3.057318\n",
            "30    4  0.6  0.1  0.3  0.341548  0.470739  1.810703  1.836932  3.113351\n",
            "31    4  0.6  0.2  0.2  0.372540  0.518115  1.992936  2.008276  3.123013\n",
            "32    4  0.6  0.3  0.1  0.353857  0.470739  1.810703  1.886167  3.074691\n",
            "33    4  0.7  0.1  0.2  0.313585  0.432911  1.665197  1.687250  3.115119\n",
            "34    4  0.7  0.2  0.1  0.321107  0.432911  1.665197  1.717340  3.089415\n",
            "35    4  0.8  0.1  0.1  0.265705  0.359241  1.381825  1.422063  3.092535\n",
            "    lam   v1   v2   v3         D         T         M         I         S\n",
            "0     5  0.1  0.1  0.8  0.304322  0.359241  1.381825  1.880852  2.934968\n",
            "1     5  0.1  0.2  0.7  0.370264  0.432911  1.665197  2.284229  2.923167\n",
            "2     5  0.1  0.3  0.6  0.406881  0.470739  1.810703  2.505146  2.910107\n",
            "3     5  0.1  0.4  0.5  0.424457  0.487565  1.875425  2.609852  2.901162\n",
            "4     5  0.1  0.5  0.4  0.426078  0.487565  1.875425  2.617954  2.896390\n",
            "5     5  0.1  0.6  0.3  0.411806  0.470739  1.810703  2.529770  2.895071\n",
            "6     5  0.1  0.7  0.2  0.378717  0.432911  1.665197  2.326497  2.895060\n",
            "7     5  0.1  0.8  0.1  0.316873  0.359241  1.381825  1.943607  2.884675\n",
            "8     5  0.2  0.1  0.7  0.339595  0.432911  1.665197  2.130886  3.026448\n",
            "9     5  0.2  0.2  0.6  0.403463  0.518115  1.992936  2.535428  3.034878\n",
            "10    5  0.2  0.3  0.5  0.436242  0.558123  2.146825  2.739332  3.030596\n",
            "11    5  0.2  0.4  0.4  0.448042  0.570259  2.193510  2.810467  3.024634\n",
            "12    5  0.2  0.5  0.3  0.441135  0.558123  2.146825  2.763796  3.017716\n",
            "13    5  0.2  0.6  0.2  0.413513  0.518115  1.992936  2.585678  3.006392\n",
            "14    5  0.2  0.7  0.1  0.355571  0.432911  1.665197  2.210768  2.972415\n",
            "15    5  0.3  0.1  0.6  0.356701  0.470739  1.810703  2.254243  3.065773\n",
            "16    5  0.3  0.2  0.5  0.416353  0.558123  2.146825  2.639888  3.083136\n",
            "17    5  0.3  0.3  0.4  0.443121  0.593094  2.281342  2.808699  3.081443\n",
            "18    5  0.3  0.4  0.3  0.446307  0.593094  2.281342  2.824627  3.073509\n",
            "19    5  0.3  0.5  0.2  0.426124  0.558123  2.146825  2.688745  3.057291\n",
            "20    5  0.3  0.6  0.1  0.373934  0.470739  1.810703  2.340411  3.011895\n",
            "21    5  0.4  0.1  0.5  0.361882  0.487565  1.875425  2.296974  3.088702\n",
            "22    5  0.4  0.2  0.4  0.415255  0.570259  2.193510  2.646537  3.109461\n",
            "23    5  0.4  0.3  0.3  0.433319  0.593094  2.281342  2.759689  3.105879\n",
            "24    5  0.4  0.4  0.2  0.423298  0.570259  2.193510  2.686747  3.088603\n",
            "25    5  0.4  0.5  0.1  0.378851  0.487565  1.875425  2.381822  3.037357\n",
            "26    5  0.5  0.1  0.4  0.356896  0.487565  1.875425  2.272045  3.103824\n",
            "27    5  0.5  0.2  0.3  0.401299  0.558123  2.146825  2.564616  3.123034\n",
            "28    5  0.5  0.3  0.2  0.406177  0.558123  2.146825  2.589009  3.110098\n",
            "29    5  0.5  0.4  0.1  0.372245  0.487565  1.875425  2.348791  3.057318\n",
            "30    5  0.6  0.1  0.3  0.341548  0.470739  1.810703  2.178480  3.113351\n",
            "31    5  0.6  0.2  0.2  0.372540  0.518115  1.992936  2.380817  3.123013\n",
            "32    5  0.6  0.3  0.1  0.353857  0.470739  1.810703  2.240024  3.074691\n",
            "33    5  0.7  0.1  0.2  0.313585  0.432911  1.665197  2.000834  3.115119\n",
            "34    5  0.7  0.2  0.1  0.321107  0.432911  1.665197  2.038448  3.089415\n",
            "35    5  0.8  0.1  0.1  0.265705  0.359241  1.381825  1.687768  3.092535\n",
            "    lam   v1   v2   v3         D         T         M         I         S\n",
            "0     6  0.1  0.1  0.8  0.304322  0.359241  1.381825  2.185174  2.934968\n",
            "1     6  0.1  0.2  0.7  0.370264  0.432911  1.665197  2.654492  2.923167\n",
            "2     6  0.1  0.3  0.6  0.406881  0.470739  1.810703  2.912027  2.910107\n",
            "3     6  0.1  0.4  0.5  0.424457  0.487565  1.875425  3.034309  2.901162\n",
            "4     6  0.1  0.5  0.4  0.426078  0.487565  1.875425  3.044032  2.896390\n",
            "5     6  0.1  0.6  0.3  0.411806  0.470739  1.810703  2.941576  2.895071\n",
            "6     6  0.1  0.7  0.2  0.378717  0.432911  1.665197  2.705215  2.895060\n",
            "7     6  0.1  0.8  0.1  0.316873  0.359241  1.381825  2.260480  2.884675\n",
            "8     6  0.2  0.1  0.7  0.339595  0.432911  1.665197  2.470481  3.026448\n",
            "9     6  0.2  0.2  0.6  0.403463  0.518115  1.992936  2.938890  3.034878\n",
            "10    6  0.2  0.3  0.5  0.436242  0.558123  2.146825  3.175574  3.030596\n",
            "11    6  0.2  0.4  0.4  0.448042  0.570259  2.193510  3.258509  3.024634\n",
            "12    6  0.2  0.5  0.3  0.441135  0.558123  2.146825  3.204931  3.017716\n",
            "13    6  0.2  0.6  0.2  0.413513  0.518115  1.992936  2.999191  3.006392\n",
            "14    6  0.2  0.7  0.1  0.355571  0.432911  1.665197  2.566340  2.972415\n",
            "15    6  0.3  0.1  0.6  0.356701  0.470739  1.810703  2.610943  3.065773\n",
            "16    6  0.3  0.2  0.5  0.416353  0.558123  2.146825  3.056241  3.083136\n",
            "17    6  0.3  0.3  0.4  0.443121  0.593094  2.281342  3.251820  3.081443\n",
            "18    6  0.3  0.4  0.3  0.446307  0.593094  2.281342  3.270934  3.073509\n",
            "19    6  0.3  0.5  0.2  0.426124  0.558123  2.146825  3.114869  3.057291\n",
            "20    6  0.3  0.6  0.1  0.373934  0.470739  1.810703  2.714345  3.011895\n",
            "21    6  0.4  0.1  0.5  0.361882  0.487565  1.875425  2.658856  3.088702\n",
            "22    6  0.4  0.2  0.4  0.415255  0.570259  2.193510  3.061792  3.109461\n",
            "23    6  0.4  0.3  0.3  0.433319  0.593094  2.281342  3.193008  3.105879\n",
            "24    6  0.4  0.4  0.2  0.423298  0.570259  2.193510  3.110045  3.088603\n",
            "25    6  0.4  0.5  0.1  0.378851  0.487565  1.875425  2.760674  3.037357\n",
            "26    6  0.5  0.1  0.4  0.356896  0.487565  1.875425  2.628941  3.103824\n",
            "27    6  0.5  0.2  0.3  0.401299  0.558123  2.146825  2.965915  3.123034\n",
            "28    6  0.5  0.3  0.2  0.406177  0.558123  2.146825  2.995186  3.110098\n",
            "29    6  0.5  0.4  0.1  0.372245  0.487565  1.875425  2.721036  3.057318\n",
            "30    6  0.6  0.1  0.3  0.341548  0.470739  1.810703  2.520029  3.113351\n",
            "31    6  0.6  0.2  0.2  0.372540  0.518115  1.992936  2.753357  3.123013\n",
            "32    6  0.6  0.3  0.1  0.353857  0.470739  1.810703  2.593882  3.074691\n",
            "33    6  0.7  0.1  0.2  0.313585  0.432911  1.665197  2.314419  3.115119\n",
            "34    6  0.7  0.2  0.1  0.321107  0.432911  1.665197  2.359555  3.089415\n",
            "35    6  0.8  0.1  0.1  0.265705  0.359241  1.381825  1.953473  3.092535\n",
            "    lam   v1   v2   v3         D         T         M         I         S\n",
            "0     7  0.1  0.1  0.8  0.304322  0.359241  1.381825  2.489497  2.934968\n",
            "1     7  0.1  0.2  0.7  0.370264  0.432911  1.665197  3.024756  2.923167\n",
            "2     7  0.1  0.3  0.6  0.406881  0.470739  1.810703  3.318909  2.910107\n",
            "3     7  0.1  0.4  0.5  0.424457  0.487565  1.875425  3.458766  2.901162\n",
            "4     7  0.1  0.5  0.4  0.426078  0.487565  1.875425  3.470109  2.896390\n",
            "5     7  0.1  0.6  0.3  0.411806  0.470739  1.810703  3.353382  2.895071\n",
            "6     7  0.1  0.7  0.2  0.378717  0.432911  1.665197  3.083932  2.895060\n",
            "7     7  0.1  0.8  0.1  0.316873  0.359241  1.381825  2.577354  2.884675\n",
            "8     7  0.2  0.1  0.7  0.339595  0.432911  1.665197  2.810076  3.026448\n",
            "9     7  0.2  0.2  0.6  0.403463  0.518115  1.992936  3.342353  3.034878\n",
            "10    7  0.2  0.3  0.5  0.436242  0.558123  2.146825  3.611816  3.030596\n",
            "11    7  0.2  0.4  0.4  0.448042  0.570259  2.193510  3.706550  3.024634\n",
            "12    7  0.2  0.5  0.3  0.441135  0.558123  2.146825  3.646065  3.017716\n",
            "13    7  0.2  0.6  0.2  0.413513  0.518115  1.992936  3.412704  3.006392\n",
            "14    7  0.2  0.7  0.1  0.355571  0.432911  1.665197  2.921911  2.972415\n",
            "15    7  0.3  0.1  0.6  0.356701  0.470739  1.810703  2.967644  3.065773\n",
            "16    7  0.3  0.2  0.5  0.416353  0.558123  2.146825  3.472594  3.083136\n",
            "17    7  0.3  0.3  0.4  0.443121  0.593094  2.281342  3.694941  3.081443\n",
            "18    7  0.3  0.4  0.3  0.446307  0.593094  2.281342  3.717241  3.073509\n",
            "19    7  0.3  0.5  0.2  0.426124  0.558123  2.146825  3.540993  3.057291\n",
            "20    7  0.3  0.6  0.1  0.373934  0.470739  1.810703  3.088279  3.011895\n",
            "21    7  0.4  0.1  0.5  0.361882  0.487565  1.875425  3.020738  3.088702\n",
            "22    7  0.4  0.2  0.4  0.415255  0.570259  2.193510  3.477048  3.109461\n",
            "23    7  0.4  0.3  0.3  0.433319  0.593094  2.281342  3.626327  3.105879\n",
            "24    7  0.4  0.4  0.2  0.423298  0.570259  2.193510  3.533343  3.088603\n",
            "25    7  0.4  0.5  0.1  0.378851  0.487565  1.875425  3.139525  3.037357\n",
            "26    7  0.5  0.1  0.4  0.356896  0.487565  1.875425  2.985837  3.103824\n",
            "27    7  0.5  0.2  0.3  0.401299  0.558123  2.146825  3.367214  3.123034\n",
            "28    7  0.5  0.3  0.2  0.406177  0.558123  2.146825  3.401364  3.110098\n",
            "29    7  0.5  0.4  0.1  0.372245  0.487565  1.875425  3.093281  3.057318\n",
            "30    7  0.6  0.1  0.3  0.341548  0.470739  1.810703  2.861577  3.113351\n",
            "31    7  0.6  0.2  0.2  0.372540  0.518115  1.992936  3.125897  3.123013\n",
            "32    7  0.6  0.3  0.1  0.353857  0.470739  1.810703  2.947739  3.074691\n",
            "33    7  0.7  0.1  0.2  0.313585  0.432911  1.665197  2.628004  3.115119\n",
            "34    7  0.7  0.2  0.1  0.321107  0.432911  1.665197  2.680663  3.089415\n",
            "35    7  0.8  0.1  0.1  0.265705  0.359241  1.381825  2.219179  3.092535\n",
            "    lam   v1   v2   v3         D         T         M         I         S\n",
            "0     8  0.1  0.1  0.8  0.304322  0.359241  1.381825  2.793819  2.934968\n",
            "1     8  0.1  0.2  0.7  0.370264  0.432911  1.665197  3.395020  2.923167\n",
            "2     8  0.1  0.3  0.6  0.406881  0.470739  1.810703  3.725790  2.910107\n",
            "3     8  0.1  0.4  0.5  0.424457  0.487565  1.875425  3.883223  2.901162\n",
            "4     8  0.1  0.5  0.4  0.426078  0.487565  1.875425  3.896187  2.896390\n",
            "5     8  0.1  0.6  0.3  0.411806  0.470739  1.810703  3.765188  2.895071\n",
            "6     8  0.1  0.7  0.2  0.378717  0.432911  1.665197  3.462649  2.895060\n",
            "7     8  0.1  0.8  0.1  0.316873  0.359241  1.381825  2.894227  2.884675\n",
            "8     8  0.2  0.1  0.7  0.339595  0.432911  1.665197  3.149672  3.026448\n",
            "9     8  0.2  0.2  0.6  0.403463  0.518115  1.992936  3.745815  3.034878\n",
            "10    8  0.2  0.3  0.5  0.436242  0.558123  2.146825  4.048057  3.030596\n",
            "11    8  0.2  0.4  0.4  0.448042  0.570259  2.193510  4.154592  3.024634\n",
            "12    8  0.2  0.5  0.3  0.441135  0.558123  2.146825  4.087200  3.017716\n",
            "13    8  0.2  0.6  0.2  0.413513  0.518115  1.992936  3.826216  3.006392\n",
            "14    8  0.2  0.7  0.1  0.355571  0.432911  1.665197  3.277483  2.972415\n",
            "15    8  0.3  0.1  0.6  0.356701  0.470739  1.810703  3.324345  3.065773\n",
            "16    8  0.3  0.2  0.5  0.416353  0.558123  2.146825  3.888947  3.083136\n",
            "17    8  0.3  0.3  0.4  0.443121  0.593094  2.281342  4.138062  3.081443\n",
            "18    8  0.3  0.4  0.3  0.446307  0.593094  2.281342  4.163548  3.073509\n",
            "19    8  0.3  0.5  0.2  0.426124  0.558123  2.146825  3.967118  3.057291\n",
            "20    8  0.3  0.6  0.1  0.373934  0.470739  1.810703  3.462214  3.011895\n",
            "21    8  0.4  0.1  0.5  0.361882  0.487565  1.875425  3.382620  3.088702\n",
            "22    8  0.4  0.2  0.4  0.415255  0.570259  2.193510  3.892303  3.109461\n",
            "23    8  0.4  0.3  0.3  0.433319  0.593094  2.281342  4.059646  3.105879\n",
            "24    8  0.4  0.4  0.2  0.423298  0.570259  2.193510  3.956640  3.088603\n",
            "25    8  0.4  0.5  0.1  0.378851  0.487565  1.875425  3.518377  3.037357\n",
            "26    8  0.5  0.1  0.4  0.356896  0.487565  1.875425  3.342733  3.103824\n",
            "27    8  0.5  0.2  0.3  0.401299  0.558123  2.146825  3.768513  3.123034\n",
            "28    8  0.5  0.3  0.2  0.406177  0.558123  2.146825  3.807541  3.110098\n",
            "29    8  0.5  0.4  0.1  0.372245  0.487565  1.875425  3.465526  3.057318\n",
            "30    8  0.6  0.1  0.3  0.341548  0.470739  1.810703  3.203125  3.113351\n",
            "31    8  0.6  0.2  0.2  0.372540  0.518115  1.992936  3.498438  3.123013\n",
            "32    8  0.6  0.3  0.1  0.353857  0.470739  1.810703  3.301596  3.074691\n",
            "33    8  0.7  0.1  0.2  0.313585  0.432911  1.665197  2.941588  3.115119\n",
            "34    8  0.7  0.2  0.1  0.321107  0.432911  1.665197  3.001770  3.089415\n",
            "35    8  0.8  0.1  0.1  0.265705  0.359241  1.381825  2.484884  3.092535\n",
            "    lam   v1   v2   v3         D         T         M         I         S\n",
            "0     9  0.1  0.1  0.8  0.304322  0.359241  1.381825  3.098141  2.934968\n",
            "1     9  0.1  0.2  0.7  0.370264  0.432911  1.665197  3.765283  2.923167\n",
            "2     9  0.1  0.3  0.6  0.406881  0.470739  1.810703  4.132671  2.910107\n",
            "3     9  0.1  0.4  0.5  0.424457  0.487565  1.875425  4.307681  2.901162\n",
            "4     9  0.1  0.5  0.4  0.426078  0.487565  1.875425  4.322265  2.896390\n",
            "5     9  0.1  0.6  0.3  0.411806  0.470739  1.810703  4.176994  2.895071\n",
            "6     9  0.1  0.7  0.2  0.378717  0.432911  1.665197  3.841367  2.895060\n",
            "7     9  0.1  0.8  0.1  0.316873  0.359241  1.381825  3.211100  2.884675\n",
            "8     9  0.2  0.1  0.7  0.339595  0.432911  1.665197  3.489267  3.026448\n",
            "9     9  0.2  0.2  0.6  0.403463  0.518115  1.992936  4.149278  3.034878\n",
            "10    9  0.2  0.3  0.5  0.436242  0.558123  2.146825  4.484299  3.030596\n",
            "11    9  0.2  0.4  0.4  0.448042  0.570259  2.193510  4.602633  3.024634\n",
            "12    9  0.2  0.5  0.3  0.441135  0.558123  2.146825  4.528335  3.017716\n",
            "13    9  0.2  0.6  0.2  0.413513  0.518115  1.992936  4.239729  3.006392\n",
            "14    9  0.2  0.7  0.1  0.355571  0.432911  1.665197  3.633054  2.972415\n",
            "15    9  0.3  0.1  0.6  0.356701  0.470739  1.810703  3.681046  3.065773\n",
            "16    9  0.3  0.2  0.5  0.416353  0.558123  2.146825  4.305300  3.083136\n",
            "17    9  0.3  0.3  0.4  0.443121  0.593094  2.281342  4.581183  3.081443\n",
            "18    9  0.3  0.4  0.3  0.446307  0.593094  2.281342  4.609854  3.073509\n",
            "19    9  0.3  0.5  0.2  0.426124  0.558123  2.146825  4.393242  3.057291\n",
            "20    9  0.3  0.6  0.1  0.373934  0.470739  1.810703  3.836148  3.011895\n",
            "21    9  0.4  0.1  0.5  0.361882  0.487565  1.875425  3.744501  3.088702\n",
            "22    9  0.4  0.2  0.4  0.415255  0.570259  2.193510  4.307559  3.109461\n",
            "23    9  0.4  0.3  0.3  0.433319  0.593094  2.281342  4.492965  3.105879\n",
            "24    9  0.4  0.4  0.2  0.423298  0.570259  2.193510  4.379938  3.088603\n",
            "25    9  0.4  0.5  0.1  0.378851  0.487565  1.875425  3.897228  3.037357\n",
            "26    9  0.5  0.1  0.4  0.356896  0.487565  1.875425  3.699629  3.103824\n",
            "27    9  0.5  0.2  0.3  0.401299  0.558123  2.146825  4.169812  3.123034\n",
            "28    9  0.5  0.3  0.2  0.406177  0.558123  2.146825  4.213718  3.110098\n",
            "29    9  0.5  0.4  0.1  0.372245  0.487565  1.875425  3.837772  3.057318\n",
            "30    9  0.6  0.1  0.3  0.341548  0.470739  1.810703  3.544673  3.113351\n",
            "31    9  0.6  0.2  0.2  0.372540  0.518115  1.992936  3.870978  3.123013\n",
            "32    9  0.6  0.3  0.1  0.353857  0.470739  1.810703  3.655453  3.074691\n",
            "33    9  0.7  0.1  0.2  0.313585  0.432911  1.665197  3.255173  3.115119\n",
            "34    9  0.7  0.2  0.1  0.321107  0.432911  1.665197  3.322877  3.089415\n",
            "35    9  0.8  0.1  0.1  0.265705  0.359241  1.381825  2.750590  3.092535\n",
            "    lam   v1   v2   v3         D         T         M         I         S\n",
            "0    10  0.1  0.1  0.8  0.304322  0.359241  1.381825  3.402464  2.934968\n",
            "1    10  0.1  0.2  0.7  0.370264  0.432911  1.665197  4.135547  2.923167\n",
            "2    10  0.1  0.3  0.6  0.406881  0.470739  1.810703  4.539553  2.910107\n",
            "3    10  0.1  0.4  0.5  0.424457  0.487565  1.875425  4.732138  2.901162\n",
            "4    10  0.1  0.5  0.4  0.426078  0.487565  1.875425  4.748343  2.896390\n",
            "5    10  0.1  0.6  0.3  0.411806  0.470739  1.810703  4.588800  2.895071\n",
            "6    10  0.1  0.7  0.2  0.378717  0.432911  1.665197  4.220084  2.895060\n",
            "7    10  0.1  0.8  0.1  0.316873  0.359241  1.381825  3.527973  2.884675\n",
            "8    10  0.2  0.1  0.7  0.339595  0.432911  1.665197  3.828862  3.026448\n",
            "9    10  0.2  0.2  0.6  0.403463  0.518115  1.992936  4.552740  3.034878\n",
            "10   10  0.2  0.3  0.5  0.436242  0.558123  2.146825  4.920541  3.030596\n",
            "11   10  0.2  0.4  0.4  0.448042  0.570259  2.193510  5.050675  3.024634\n",
            "12   10  0.2  0.5  0.3  0.441135  0.558123  2.146825  4.969469  3.017716\n",
            "13   10  0.2  0.6  0.2  0.413513  0.518115  1.992936  4.653242  3.006392\n",
            "14   10  0.2  0.7  0.1  0.355571  0.432911  1.665197  3.988626  2.972415\n",
            "15   10  0.3  0.1  0.6  0.356701  0.470739  1.810703  4.037747  3.065773\n",
            "16   10  0.3  0.2  0.5  0.416353  0.558123  2.146825  4.721653  3.083136\n",
            "17   10  0.3  0.3  0.4  0.443121  0.593094  2.281342  5.024304  3.081443\n",
            "18   10  0.3  0.4  0.3  0.446307  0.593094  2.281342  5.056161  3.073509\n",
            "19   10  0.3  0.5  0.2  0.426124  0.558123  2.146825  4.819367  3.057291\n",
            "20   10  0.3  0.6  0.1  0.373934  0.470739  1.810703  4.210082  3.011895\n",
            "21   10  0.4  0.1  0.5  0.361882  0.487565  1.875425  4.106383  3.088702\n",
            "22   10  0.4  0.2  0.4  0.415255  0.570259  2.193510  4.722814  3.109461\n",
            "23   10  0.4  0.3  0.3  0.433319  0.593094  2.281342  4.926284  3.105879\n",
            "24   10  0.4  0.4  0.2  0.423298  0.570259  2.193510  4.803235  3.088603\n",
            "25   10  0.4  0.5  0.1  0.378851  0.487565  1.875425  4.276079  3.037357\n",
            "26   10  0.5  0.1  0.4  0.356896  0.487565  1.875425  4.056525  3.103824\n",
            "27   10  0.5  0.2  0.3  0.401299  0.558123  2.146825  4.571110  3.123034\n",
            "28   10  0.5  0.3  0.2  0.406177  0.558123  2.146825  4.619896  3.110098\n",
            "29   10  0.5  0.4  0.1  0.372245  0.487565  1.875425  4.210017  3.057318\n",
            "30   10  0.6  0.1  0.3  0.341548  0.470739  1.810703  3.886222  3.113351\n",
            "31   10  0.6  0.2  0.2  0.372540  0.518115  1.992936  4.243519  3.123013\n",
            "32   10  0.6  0.3  0.1  0.353857  0.470739  1.810703  4.009310  3.074691\n",
            "33   10  0.7  0.1  0.2  0.313585  0.432911  1.665197  3.568758  3.115119\n",
            "34   10  0.7  0.2  0.1  0.321107  0.432911  1.665197  3.643985  3.089415\n",
            "35   10  0.8  0.1  0.1  0.265705  0.359241  1.381825  3.016295  3.092535\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for lam in range(0,11):\n",
        "  I_num = I_2\n",
        "  S_num = S_1\n",
        "  D_list = []\n",
        "  T_list = []\n",
        "  M_list = []\n",
        "  I_list = []\n",
        "  S_list = []\n",
        "\n",
        "  for i in range(len(v_com)):\n",
        "      Da = D(f1,f2,f3,v_com[i][0],v_com[i][1],v_com[i][2],N,a,b,c,d,g)\n",
        "      Ta = TM(f1,f2,f3,v_com[i][0],v_com[i][1],v_com[i][2],N,e,h,g)[0]\n",
        "      Ma = TM(f1,f2,f3,v_com[i][0],v_com[i][1],v_com[i][2],N,e,h,g)[1]\n",
        "      Ia = I_num(Da,Ta,lam)\n",
        "      Sa = S_num(Da,Ta,Ma)\n",
        "\n",
        "      D_list.append(Da)\n",
        "      T_list.append(Ta)\n",
        "      M_list.append(Ma)\n",
        "      I_list.append(Ia)\n",
        "      S_list.append(Sa)\n",
        "\n",
        "\n",
        "  I_list.index(sorted(I_list))\n",
        "  Hyolist = [[] for _ in range(len(v_com))]\n",
        "  for i in range(len(v_com)):\n",
        "      Hyolist[i].append(lam)\n",
        "      Hyolist[i].append(v_com[i][0])\n",
        "      Hyolist[i].append(v_com[i][1])\n",
        "      Hyolist[i].append(v_com[i][2])\n",
        "      Hyolist[i].append(D_list[i])\n",
        "      Hyolist[i].append(T_list[i])\n",
        "      Hyolist[i].append(M_list[i])\n",
        "      Hyolist[i].append(I_list[i])\n",
        "      Hyolist[i].append(S_list[i])\n",
        "  hyo = pd.DataFrame(Hyolist)\n",
        "  hyo.columns = ['lam','v1','v2','v3','D','T','M','I','S']\n",
        "  print(hyo)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "43b783a8-39cb-4379-e117-80cedab7abd7",
        "id": "l6E_J6hHG4fH"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    lam   v1   v2   v3         D         T         M         I         S\n",
            "0     0  0.1  0.1  0.8  0.304322  0.359241  1.381825  0.359241  2.934968\n",
            "1     0  0.1  0.2  0.7  0.370264  0.432911  1.665197  0.432911  2.923167\n",
            "2     0  0.1  0.3  0.6  0.406881  0.470739  1.810703  0.470739  2.910107\n",
            "3     0  0.1  0.4  0.5  0.424457  0.487565  1.875425  0.487565  2.901162\n",
            "4     0  0.1  0.5  0.4  0.426078  0.487565  1.875425  0.487565  2.896390\n",
            "5     0  0.1  0.6  0.3  0.411806  0.470739  1.810703  0.470739  2.895071\n",
            "6     0  0.1  0.7  0.2  0.378717  0.432911  1.665197  0.432911  2.895060\n",
            "7     0  0.1  0.8  0.1  0.316873  0.359241  1.381825  0.359241  2.884675\n",
            "8     0  0.2  0.1  0.7  0.339595  0.432911  1.665197  0.432911  3.026448\n",
            "9     0  0.2  0.2  0.6  0.403463  0.518115  1.992936  0.518115  3.034878\n",
            "10    0  0.2  0.3  0.5  0.436242  0.558123  2.146825  0.558123  3.030596\n",
            "11    0  0.2  0.4  0.4  0.448042  0.570259  2.193510  0.570259  3.024634\n",
            "12    0  0.2  0.5  0.3  0.441135  0.558123  2.146825  0.558123  3.017716\n",
            "13    0  0.2  0.6  0.2  0.413513  0.518115  1.992936  0.518115  3.006392\n",
            "14    0  0.2  0.7  0.1  0.355571  0.432911  1.665197  0.432911  2.972415\n",
            "15    0  0.3  0.1  0.6  0.356701  0.470739  1.810703  0.470739  3.065773\n",
            "16    0  0.3  0.2  0.5  0.416353  0.558123  2.146825  0.558123  3.083136\n",
            "17    0  0.3  0.3  0.4  0.443121  0.593094  2.281342  0.593094  3.081443\n",
            "18    0  0.3  0.4  0.3  0.446307  0.593094  2.281342  0.593094  3.073509\n",
            "19    0  0.3  0.5  0.2  0.426124  0.558123  2.146825  0.558123  3.057291\n",
            "20    0  0.3  0.6  0.1  0.373934  0.470739  1.810703  0.470739  3.011895\n",
            "21    0  0.4  0.1  0.5  0.361882  0.487565  1.875425  0.487565  3.088702\n",
            "22    0  0.4  0.2  0.4  0.415255  0.570259  2.193510  0.570259  3.109461\n",
            "23    0  0.4  0.3  0.3  0.433319  0.593094  2.281342  0.593094  3.105879\n",
            "24    0  0.4  0.4  0.2  0.423298  0.570259  2.193510  0.570259  3.088603\n",
            "25    0  0.4  0.5  0.1  0.378851  0.487565  1.875425  0.487565  3.037357\n",
            "26    0  0.5  0.1  0.4  0.356896  0.487565  1.875425  0.487565  3.103824\n",
            "27    0  0.5  0.2  0.3  0.401299  0.558123  2.146825  0.558123  3.123034\n",
            "28    0  0.5  0.3  0.2  0.406177  0.558123  2.146825  0.558123  3.110098\n",
            "29    0  0.5  0.4  0.1  0.372245  0.487565  1.875425  0.487565  3.057318\n",
            "30    0  0.6  0.1  0.3  0.341548  0.470739  1.810703  0.470739  3.113351\n",
            "31    0  0.6  0.2  0.2  0.372540  0.518115  1.992936  0.518115  3.123013\n",
            "32    0  0.6  0.3  0.1  0.353857  0.470739  1.810703  0.470739  3.074691\n",
            "33    0  0.7  0.1  0.2  0.313585  0.432911  1.665197  0.432911  3.115119\n",
            "34    0  0.7  0.2  0.1  0.321107  0.432911  1.665197  0.432911  3.089415\n",
            "35    0  0.8  0.1  0.1  0.265705  0.359241  1.381825  0.359241  3.092535\n",
            "    lam   v1   v2   v3         D         T         M         I         S\n",
            "0     1  0.1  0.1  0.8  0.304322  0.359241  1.381825  0.663563  2.934968\n",
            "1     1  0.1  0.2  0.7  0.370264  0.432911  1.665197  0.803174  2.923167\n",
            "2     1  0.1  0.3  0.6  0.406881  0.470739  1.810703  0.877620  2.910107\n",
            "3     1  0.1  0.4  0.5  0.424457  0.487565  1.875425  0.912022  2.901162\n",
            "4     1  0.1  0.5  0.4  0.426078  0.487565  1.875425  0.913643  2.896390\n",
            "5     1  0.1  0.6  0.3  0.411806  0.470739  1.810703  0.882545  2.895071\n",
            "6     1  0.1  0.7  0.2  0.378717  0.432911  1.665197  0.811628  2.895060\n",
            "7     1  0.1  0.8  0.1  0.316873  0.359241  1.381825  0.676114  2.884675\n",
            "8     1  0.2  0.1  0.7  0.339595  0.432911  1.665197  0.772506  3.026448\n",
            "9     1  0.2  0.2  0.6  0.403463  0.518115  1.992936  0.921578  3.034878\n",
            "10    1  0.2  0.3  0.5  0.436242  0.558123  2.146825  0.994364  3.030596\n",
            "11    1  0.2  0.4  0.4  0.448042  0.570259  2.193510  1.018301  3.024634\n",
            "12    1  0.2  0.5  0.3  0.441135  0.558123  2.146825  0.999257  3.017716\n",
            "13    1  0.2  0.6  0.2  0.413513  0.518115  1.992936  0.931628  3.006392\n",
            "14    1  0.2  0.7  0.1  0.355571  0.432911  1.665197  0.788482  2.972415\n",
            "15    1  0.3  0.1  0.6  0.356701  0.470739  1.810703  0.827440  3.065773\n",
            "16    1  0.3  0.2  0.5  0.416353  0.558123  2.146825  0.974476  3.083136\n",
            "17    1  0.3  0.3  0.4  0.443121  0.593094  2.281342  1.036215  3.081443\n",
            "18    1  0.3  0.4  0.3  0.446307  0.593094  2.281342  1.039400  3.073509\n",
            "19    1  0.3  0.5  0.2  0.426124  0.558123  2.146825  0.984247  3.057291\n",
            "20    1  0.3  0.6  0.1  0.373934  0.470739  1.810703  0.844673  3.011895\n",
            "21    1  0.4  0.1  0.5  0.361882  0.487565  1.875425  0.849447  3.088702\n",
            "22    1  0.4  0.2  0.4  0.415255  0.570259  2.193510  0.985515  3.109461\n",
            "23    1  0.4  0.3  0.3  0.433319  0.593094  2.281342  1.026413  3.105879\n",
            "24    1  0.4  0.4  0.2  0.423298  0.570259  2.193510  0.993557  3.088603\n",
            "25    1  0.4  0.5  0.1  0.378851  0.487565  1.875425  0.866416  3.037357\n",
            "26    1  0.5  0.1  0.4  0.356896  0.487565  1.875425  0.844461  3.103824\n",
            "27    1  0.5  0.2  0.3  0.401299  0.558123  2.146825  0.959421  3.123034\n",
            "28    1  0.5  0.3  0.2  0.406177  0.558123  2.146825  0.964300  3.110098\n",
            "29    1  0.5  0.4  0.1  0.372245  0.487565  1.875425  0.859810  3.057318\n",
            "30    1  0.6  0.1  0.3  0.341548  0.470739  1.810703  0.812287  3.113351\n",
            "31    1  0.6  0.2  0.2  0.372540  0.518115  1.992936  0.890655  3.123013\n",
            "32    1  0.6  0.3  0.1  0.353857  0.470739  1.810703  0.824596  3.074691\n",
            "33    1  0.7  0.1  0.2  0.313585  0.432911  1.665197  0.746496  3.115119\n",
            "34    1  0.7  0.2  0.1  0.321107  0.432911  1.665197  0.754018  3.089415\n",
            "35    1  0.8  0.1  0.1  0.265705  0.359241  1.381825  0.624946  3.092535\n",
            "    lam   v1   v2   v3         D         T         M         I         S\n",
            "0     2  0.1  0.1  0.8  0.304322  0.359241  1.381825  0.967885  2.934968\n",
            "1     2  0.1  0.2  0.7  0.370264  0.432911  1.665197  1.173438  2.923167\n",
            "2     2  0.1  0.3  0.6  0.406881  0.470739  1.810703  1.284502  2.910107\n",
            "3     2  0.1  0.4  0.5  0.424457  0.487565  1.875425  1.336480  2.901162\n",
            "4     2  0.1  0.5  0.4  0.426078  0.487565  1.875425  1.339721  2.896390\n",
            "5     2  0.1  0.6  0.3  0.411806  0.470739  1.810703  1.294351  2.895071\n",
            "6     2  0.1  0.7  0.2  0.378717  0.432911  1.665197  1.190345  2.895060\n",
            "7     2  0.1  0.8  0.1  0.316873  0.359241  1.381825  0.992987  2.884675\n",
            "8     2  0.2  0.1  0.7  0.339595  0.432911  1.665197  1.112101  3.026448\n",
            "9     2  0.2  0.2  0.6  0.403463  0.518115  1.992936  1.325040  3.034878\n",
            "10    2  0.2  0.3  0.5  0.436242  0.558123  2.146825  1.430606  3.030596\n",
            "11    2  0.2  0.4  0.4  0.448042  0.570259  2.193510  1.466342  3.024634\n",
            "12    2  0.2  0.5  0.3  0.441135  0.558123  2.146825  1.440392  3.017716\n",
            "13    2  0.2  0.6  0.2  0.413513  0.518115  1.992936  1.345140  3.006392\n",
            "14    2  0.2  0.7  0.1  0.355571  0.432911  1.665197  1.144054  2.972415\n",
            "15    2  0.3  0.1  0.6  0.356701  0.470739  1.810703  1.184140  3.065773\n",
            "16    2  0.3  0.2  0.5  0.416353  0.558123  2.146825  1.390829  3.083136\n",
            "17    2  0.3  0.3  0.4  0.443121  0.593094  2.281342  1.479336  3.081443\n",
            "18    2  0.3  0.4  0.3  0.446307  0.593094  2.281342  1.485707  3.073509\n",
            "19    2  0.3  0.5  0.2  0.426124  0.558123  2.146825  1.410371  3.057291\n",
            "20    2  0.3  0.6  0.1  0.373934  0.470739  1.810703  1.218608  3.011895\n",
            "21    2  0.4  0.1  0.5  0.361882  0.487565  1.875425  1.211329  3.088702\n",
            "22    2  0.4  0.2  0.4  0.415255  0.570259  2.193510  1.400770  3.109461\n",
            "23    2  0.4  0.3  0.3  0.433319  0.593094  2.281342  1.459732  3.105879\n",
            "24    2  0.4  0.4  0.2  0.423298  0.570259  2.193510  1.416855  3.088603\n",
            "25    2  0.4  0.5  0.1  0.378851  0.487565  1.875425  1.245268  3.037357\n",
            "26    2  0.5  0.1  0.4  0.356896  0.487565  1.875425  1.201357  3.103824\n",
            "27    2  0.5  0.2  0.3  0.401299  0.558123  2.146825  1.360720  3.123034\n",
            "28    2  0.5  0.3  0.2  0.406177  0.558123  2.146825  1.370477  3.110098\n",
            "29    2  0.5  0.4  0.1  0.372245  0.487565  1.875425  1.232055  3.057318\n",
            "30    2  0.6  0.1  0.3  0.341548  0.470739  1.810703  1.153835  3.113351\n",
            "31    2  0.6  0.2  0.2  0.372540  0.518115  1.992936  1.263196  3.123013\n",
            "32    2  0.6  0.3  0.1  0.353857  0.470739  1.810703  1.178453  3.074691\n",
            "33    2  0.7  0.1  0.2  0.313585  0.432911  1.665197  1.060080  3.115119\n",
            "34    2  0.7  0.2  0.1  0.321107  0.432911  1.665197  1.075126  3.089415\n",
            "35    2  0.8  0.1  0.1  0.265705  0.359241  1.381825  0.890652  3.092535\n",
            "    lam   v1   v2   v3         D         T         M         I         S\n",
            "0     3  0.1  0.1  0.8  0.304322  0.359241  1.381825  1.272208  2.934968\n",
            "1     3  0.1  0.2  0.7  0.370264  0.432911  1.665197  1.543702  2.923167\n",
            "2     3  0.1  0.3  0.6  0.406881  0.470739  1.810703  1.691383  2.910107\n",
            "3     3  0.1  0.4  0.5  0.424457  0.487565  1.875425  1.760937  2.901162\n",
            "4     3  0.1  0.5  0.4  0.426078  0.487565  1.875425  1.765798  2.896390\n",
            "5     3  0.1  0.6  0.3  0.411806  0.470739  1.810703  1.706157  2.895071\n",
            "6     3  0.1  0.7  0.2  0.378717  0.432911  1.665197  1.569063  2.895060\n",
            "7     3  0.1  0.8  0.1  0.316873  0.359241  1.381825  1.309861  2.884675\n",
            "8     3  0.2  0.1  0.7  0.339595  0.432911  1.665197  1.451696  3.026448\n",
            "9     3  0.2  0.2  0.6  0.403463  0.518115  1.992936  1.728503  3.034878\n",
            "10    3  0.2  0.3  0.5  0.436242  0.558123  2.146825  1.866848  3.030596\n",
            "11    3  0.2  0.4  0.4  0.448042  0.570259  2.193510  1.914384  3.024634\n",
            "12    3  0.2  0.5  0.3  0.441135  0.558123  2.146825  1.881527  3.017716\n",
            "13    3  0.2  0.6  0.2  0.413513  0.518115  1.992936  1.758653  3.006392\n",
            "14    3  0.2  0.7  0.1  0.355571  0.432911  1.665197  1.499625  2.972415\n",
            "15    3  0.3  0.1  0.6  0.356701  0.470739  1.810703  1.540841  3.065773\n",
            "16    3  0.3  0.2  0.5  0.416353  0.558123  2.146825  1.807182  3.083136\n",
            "17    3  0.3  0.3  0.4  0.443121  0.593094  2.281342  1.922457  3.081443\n",
            "18    3  0.3  0.4  0.3  0.446307  0.593094  2.281342  1.932014  3.073509\n",
            "19    3  0.3  0.5  0.2  0.426124  0.558123  2.146825  1.836496  3.057291\n",
            "20    3  0.3  0.6  0.1  0.373934  0.470739  1.810703  1.592542  3.011895\n",
            "21    3  0.4  0.1  0.5  0.361882  0.487565  1.875425  1.573210  3.088702\n",
            "22    3  0.4  0.2  0.4  0.415255  0.570259  2.193510  1.816026  3.109461\n",
            "23    3  0.4  0.3  0.3  0.433319  0.593094  2.281342  1.893051  3.105879\n",
            "24    3  0.4  0.4  0.2  0.423298  0.570259  2.193510  1.840152  3.088603\n",
            "25    3  0.4  0.5  0.1  0.378851  0.487565  1.875425  1.624119  3.037357\n",
            "26    3  0.5  0.1  0.4  0.356896  0.487565  1.875425  1.558253  3.103824\n",
            "27    3  0.5  0.2  0.3  0.401299  0.558123  2.146825  1.762019  3.123034\n",
            "28    3  0.5  0.3  0.2  0.406177  0.558123  2.146825  1.776655  3.110098\n",
            "29    3  0.5  0.4  0.1  0.372245  0.487565  1.875425  1.604301  3.057318\n",
            "30    3  0.6  0.1  0.3  0.341548  0.470739  1.810703  1.495384  3.113351\n",
            "31    3  0.6  0.2  0.2  0.372540  0.518115  1.992936  1.635736  3.123013\n",
            "32    3  0.6  0.3  0.1  0.353857  0.470739  1.810703  1.532310  3.074691\n",
            "33    3  0.7  0.1  0.2  0.313585  0.432911  1.665197  1.373665  3.115119\n",
            "34    3  0.7  0.2  0.1  0.321107  0.432911  1.665197  1.396233  3.089415\n",
            "35    3  0.8  0.1  0.1  0.265705  0.359241  1.381825  1.156357  3.092535\n",
            "    lam   v1   v2   v3         D         T         M         I         S\n",
            "0     4  0.1  0.1  0.8  0.304322  0.359241  1.381825  1.576530  2.934968\n",
            "1     4  0.1  0.2  0.7  0.370264  0.432911  1.665197  1.913965  2.923167\n",
            "2     4  0.1  0.3  0.6  0.406881  0.470739  1.810703  2.098264  2.910107\n",
            "3     4  0.1  0.4  0.5  0.424457  0.487565  1.875425  2.185394  2.901162\n",
            "4     4  0.1  0.5  0.4  0.426078  0.487565  1.875425  2.191876  2.896390\n",
            "5     4  0.1  0.6  0.3  0.411806  0.470739  1.810703  2.117963  2.895071\n",
            "6     4  0.1  0.7  0.2  0.378717  0.432911  1.665197  1.947780  2.895060\n",
            "7     4  0.1  0.8  0.1  0.316873  0.359241  1.381825  1.626734  2.884675\n",
            "8     4  0.2  0.1  0.7  0.339595  0.432911  1.665197  1.791291  3.026448\n",
            "9     4  0.2  0.2  0.6  0.403463  0.518115  1.992936  2.131965  3.034878\n",
            "10    4  0.2  0.3  0.5  0.436242  0.558123  2.146825  2.303090  3.030596\n",
            "11    4  0.2  0.4  0.4  0.448042  0.570259  2.193510  2.362426  3.024634\n",
            "12    4  0.2  0.5  0.3  0.441135  0.558123  2.146825  2.322661  3.017716\n",
            "13    4  0.2  0.6  0.2  0.413513  0.518115  1.992936  2.172166  3.006392\n",
            "14    4  0.2  0.7  0.1  0.355571  0.432911  1.665197  1.855197  2.972415\n",
            "15    4  0.3  0.1  0.6  0.356701  0.470739  1.810703  1.897542  3.065773\n",
            "16    4  0.3  0.2  0.5  0.416353  0.558123  2.146825  2.223535  3.083136\n",
            "17    4  0.3  0.3  0.4  0.443121  0.593094  2.281342  2.365578  3.081443\n",
            "18    4  0.3  0.4  0.3  0.446307  0.593094  2.281342  2.378321  3.073509\n",
            "19    4  0.3  0.5  0.2  0.426124  0.558123  2.146825  2.262620  3.057291\n",
            "20    4  0.3  0.6  0.1  0.373934  0.470739  1.810703  1.966476  3.011895\n",
            "21    4  0.4  0.1  0.5  0.361882  0.487565  1.875425  1.935092  3.088702\n",
            "22    4  0.4  0.2  0.4  0.415255  0.570259  2.193510  2.231281  3.109461\n",
            "23    4  0.4  0.3  0.3  0.433319  0.593094  2.281342  2.326370  3.105879\n",
            "24    4  0.4  0.4  0.2  0.423298  0.570259  2.193510  2.263450  3.088603\n",
            "25    4  0.4  0.5  0.1  0.378851  0.487565  1.875425  2.002971  3.037357\n",
            "26    4  0.5  0.1  0.4  0.356896  0.487565  1.875425  1.915149  3.103824\n",
            "27    4  0.5  0.2  0.3  0.401299  0.558123  2.146825  2.163318  3.123034\n",
            "28    4  0.5  0.3  0.2  0.406177  0.558123  2.146825  2.182832  3.110098\n",
            "29    4  0.5  0.4  0.1  0.372245  0.487565  1.875425  1.976546  3.057318\n",
            "30    4  0.6  0.1  0.3  0.341548  0.470739  1.810703  1.836932  3.113351\n",
            "31    4  0.6  0.2  0.2  0.372540  0.518115  1.992936  2.008276  3.123013\n",
            "32    4  0.6  0.3  0.1  0.353857  0.470739  1.810703  1.886167  3.074691\n",
            "33    4  0.7  0.1  0.2  0.313585  0.432911  1.665197  1.687250  3.115119\n",
            "34    4  0.7  0.2  0.1  0.321107  0.432911  1.665197  1.717340  3.089415\n",
            "35    4  0.8  0.1  0.1  0.265705  0.359241  1.381825  1.422063  3.092535\n",
            "    lam   v1   v2   v3         D         T         M         I         S\n",
            "0     5  0.1  0.1  0.8  0.304322  0.359241  1.381825  1.880852  2.934968\n",
            "1     5  0.1  0.2  0.7  0.370264  0.432911  1.665197  2.284229  2.923167\n",
            "2     5  0.1  0.3  0.6  0.406881  0.470739  1.810703  2.505146  2.910107\n",
            "3     5  0.1  0.4  0.5  0.424457  0.487565  1.875425  2.609852  2.901162\n",
            "4     5  0.1  0.5  0.4  0.426078  0.487565  1.875425  2.617954  2.896390\n",
            "5     5  0.1  0.6  0.3  0.411806  0.470739  1.810703  2.529770  2.895071\n",
            "6     5  0.1  0.7  0.2  0.378717  0.432911  1.665197  2.326497  2.895060\n",
            "7     5  0.1  0.8  0.1  0.316873  0.359241  1.381825  1.943607  2.884675\n",
            "8     5  0.2  0.1  0.7  0.339595  0.432911  1.665197  2.130886  3.026448\n",
            "9     5  0.2  0.2  0.6  0.403463  0.518115  1.992936  2.535428  3.034878\n",
            "10    5  0.2  0.3  0.5  0.436242  0.558123  2.146825  2.739332  3.030596\n",
            "11    5  0.2  0.4  0.4  0.448042  0.570259  2.193510  2.810467  3.024634\n",
            "12    5  0.2  0.5  0.3  0.441135  0.558123  2.146825  2.763796  3.017716\n",
            "13    5  0.2  0.6  0.2  0.413513  0.518115  1.992936  2.585678  3.006392\n",
            "14    5  0.2  0.7  0.1  0.355571  0.432911  1.665197  2.210768  2.972415\n",
            "15    5  0.3  0.1  0.6  0.356701  0.470739  1.810703  2.254243  3.065773\n",
            "16    5  0.3  0.2  0.5  0.416353  0.558123  2.146825  2.639888  3.083136\n",
            "17    5  0.3  0.3  0.4  0.443121  0.593094  2.281342  2.808699  3.081443\n",
            "18    5  0.3  0.4  0.3  0.446307  0.593094  2.281342  2.824627  3.073509\n",
            "19    5  0.3  0.5  0.2  0.426124  0.558123  2.146825  2.688745  3.057291\n",
            "20    5  0.3  0.6  0.1  0.373934  0.470739  1.810703  2.340411  3.011895\n",
            "21    5  0.4  0.1  0.5  0.361882  0.487565  1.875425  2.296974  3.088702\n",
            "22    5  0.4  0.2  0.4  0.415255  0.570259  2.193510  2.646537  3.109461\n",
            "23    5  0.4  0.3  0.3  0.433319  0.593094  2.281342  2.759689  3.105879\n",
            "24    5  0.4  0.4  0.2  0.423298  0.570259  2.193510  2.686747  3.088603\n",
            "25    5  0.4  0.5  0.1  0.378851  0.487565  1.875425  2.381822  3.037357\n",
            "26    5  0.5  0.1  0.4  0.356896  0.487565  1.875425  2.272045  3.103824\n",
            "27    5  0.5  0.2  0.3  0.401299  0.558123  2.146825  2.564616  3.123034\n",
            "28    5  0.5  0.3  0.2  0.406177  0.558123  2.146825  2.589009  3.110098\n",
            "29    5  0.5  0.4  0.1  0.372245  0.487565  1.875425  2.348791  3.057318\n",
            "30    5  0.6  0.1  0.3  0.341548  0.470739  1.810703  2.178480  3.113351\n",
            "31    5  0.6  0.2  0.2  0.372540  0.518115  1.992936  2.380817  3.123013\n",
            "32    5  0.6  0.3  0.1  0.353857  0.470739  1.810703  2.240024  3.074691\n",
            "33    5  0.7  0.1  0.2  0.313585  0.432911  1.665197  2.000834  3.115119\n",
            "34    5  0.7  0.2  0.1  0.321107  0.432911  1.665197  2.038448  3.089415\n",
            "35    5  0.8  0.1  0.1  0.265705  0.359241  1.381825  1.687768  3.092535\n",
            "    lam   v1   v2   v3         D         T         M         I         S\n",
            "0     6  0.1  0.1  0.8  0.304322  0.359241  1.381825  2.185174  2.934968\n",
            "1     6  0.1  0.2  0.7  0.370264  0.432911  1.665197  2.654492  2.923167\n",
            "2     6  0.1  0.3  0.6  0.406881  0.470739  1.810703  2.912027  2.910107\n",
            "3     6  0.1  0.4  0.5  0.424457  0.487565  1.875425  3.034309  2.901162\n",
            "4     6  0.1  0.5  0.4  0.426078  0.487565  1.875425  3.044032  2.896390\n",
            "5     6  0.1  0.6  0.3  0.411806  0.470739  1.810703  2.941576  2.895071\n",
            "6     6  0.1  0.7  0.2  0.378717  0.432911  1.665197  2.705215  2.895060\n",
            "7     6  0.1  0.8  0.1  0.316873  0.359241  1.381825  2.260480  2.884675\n",
            "8     6  0.2  0.1  0.7  0.339595  0.432911  1.665197  2.470481  3.026448\n",
            "9     6  0.2  0.2  0.6  0.403463  0.518115  1.992936  2.938890  3.034878\n",
            "10    6  0.2  0.3  0.5  0.436242  0.558123  2.146825  3.175574  3.030596\n",
            "11    6  0.2  0.4  0.4  0.448042  0.570259  2.193510  3.258509  3.024634\n",
            "12    6  0.2  0.5  0.3  0.441135  0.558123  2.146825  3.204931  3.017716\n",
            "13    6  0.2  0.6  0.2  0.413513  0.518115  1.992936  2.999191  3.006392\n",
            "14    6  0.2  0.7  0.1  0.355571  0.432911  1.665197  2.566340  2.972415\n",
            "15    6  0.3  0.1  0.6  0.356701  0.470739  1.810703  2.610943  3.065773\n",
            "16    6  0.3  0.2  0.5  0.416353  0.558123  2.146825  3.056241  3.083136\n",
            "17    6  0.3  0.3  0.4  0.443121  0.593094  2.281342  3.251820  3.081443\n",
            "18    6  0.3  0.4  0.3  0.446307  0.593094  2.281342  3.270934  3.073509\n",
            "19    6  0.3  0.5  0.2  0.426124  0.558123  2.146825  3.114869  3.057291\n",
            "20    6  0.3  0.6  0.1  0.373934  0.470739  1.810703  2.714345  3.011895\n",
            "21    6  0.4  0.1  0.5  0.361882  0.487565  1.875425  2.658856  3.088702\n",
            "22    6  0.4  0.2  0.4  0.415255  0.570259  2.193510  3.061792  3.109461\n",
            "23    6  0.4  0.3  0.3  0.433319  0.593094  2.281342  3.193008  3.105879\n",
            "24    6  0.4  0.4  0.2  0.423298  0.570259  2.193510  3.110045  3.088603\n",
            "25    6  0.4  0.5  0.1  0.378851  0.487565  1.875425  2.760674  3.037357\n",
            "26    6  0.5  0.1  0.4  0.356896  0.487565  1.875425  2.628941  3.103824\n",
            "27    6  0.5  0.2  0.3  0.401299  0.558123  2.146825  2.965915  3.123034\n",
            "28    6  0.5  0.3  0.2  0.406177  0.558123  2.146825  2.995186  3.110098\n",
            "29    6  0.5  0.4  0.1  0.372245  0.487565  1.875425  2.721036  3.057318\n",
            "30    6  0.6  0.1  0.3  0.341548  0.470739  1.810703  2.520029  3.113351\n",
            "31    6  0.6  0.2  0.2  0.372540  0.518115  1.992936  2.753357  3.123013\n",
            "32    6  0.6  0.3  0.1  0.353857  0.470739  1.810703  2.593882  3.074691\n",
            "33    6  0.7  0.1  0.2  0.313585  0.432911  1.665197  2.314419  3.115119\n",
            "34    6  0.7  0.2  0.1  0.321107  0.432911  1.665197  2.359555  3.089415\n",
            "35    6  0.8  0.1  0.1  0.265705  0.359241  1.381825  1.953473  3.092535\n",
            "    lam   v1   v2   v3         D         T         M         I         S\n",
            "0     7  0.1  0.1  0.8  0.304322  0.359241  1.381825  2.489497  2.934968\n",
            "1     7  0.1  0.2  0.7  0.370264  0.432911  1.665197  3.024756  2.923167\n",
            "2     7  0.1  0.3  0.6  0.406881  0.470739  1.810703  3.318909  2.910107\n",
            "3     7  0.1  0.4  0.5  0.424457  0.487565  1.875425  3.458766  2.901162\n",
            "4     7  0.1  0.5  0.4  0.426078  0.487565  1.875425  3.470109  2.896390\n",
            "5     7  0.1  0.6  0.3  0.411806  0.470739  1.810703  3.353382  2.895071\n",
            "6     7  0.1  0.7  0.2  0.378717  0.432911  1.665197  3.083932  2.895060\n",
            "7     7  0.1  0.8  0.1  0.316873  0.359241  1.381825  2.577354  2.884675\n",
            "8     7  0.2  0.1  0.7  0.339595  0.432911  1.665197  2.810076  3.026448\n",
            "9     7  0.2  0.2  0.6  0.403463  0.518115  1.992936  3.342353  3.034878\n",
            "10    7  0.2  0.3  0.5  0.436242  0.558123  2.146825  3.611816  3.030596\n",
            "11    7  0.2  0.4  0.4  0.448042  0.570259  2.193510  3.706550  3.024634\n",
            "12    7  0.2  0.5  0.3  0.441135  0.558123  2.146825  3.646065  3.017716\n",
            "13    7  0.2  0.6  0.2  0.413513  0.518115  1.992936  3.412704  3.006392\n",
            "14    7  0.2  0.7  0.1  0.355571  0.432911  1.665197  2.921911  2.972415\n",
            "15    7  0.3  0.1  0.6  0.356701  0.470739  1.810703  2.967644  3.065773\n",
            "16    7  0.3  0.2  0.5  0.416353  0.558123  2.146825  3.472594  3.083136\n",
            "17    7  0.3  0.3  0.4  0.443121  0.593094  2.281342  3.694941  3.081443\n",
            "18    7  0.3  0.4  0.3  0.446307  0.593094  2.281342  3.717241  3.073509\n",
            "19    7  0.3  0.5  0.2  0.426124  0.558123  2.146825  3.540993  3.057291\n",
            "20    7  0.3  0.6  0.1  0.373934  0.470739  1.810703  3.088279  3.011895\n",
            "21    7  0.4  0.1  0.5  0.361882  0.487565  1.875425  3.020738  3.088702\n",
            "22    7  0.4  0.2  0.4  0.415255  0.570259  2.193510  3.477048  3.109461\n",
            "23    7  0.4  0.3  0.3  0.433319  0.593094  2.281342  3.626327  3.105879\n",
            "24    7  0.4  0.4  0.2  0.423298  0.570259  2.193510  3.533343  3.088603\n",
            "25    7  0.4  0.5  0.1  0.378851  0.487565  1.875425  3.139525  3.037357\n",
            "26    7  0.5  0.1  0.4  0.356896  0.487565  1.875425  2.985837  3.103824\n",
            "27    7  0.5  0.2  0.3  0.401299  0.558123  2.146825  3.367214  3.123034\n",
            "28    7  0.5  0.3  0.2  0.406177  0.558123  2.146825  3.401364  3.110098\n",
            "29    7  0.5  0.4  0.1  0.372245  0.487565  1.875425  3.093281  3.057318\n",
            "30    7  0.6  0.1  0.3  0.341548  0.470739  1.810703  2.861577  3.113351\n",
            "31    7  0.6  0.2  0.2  0.372540  0.518115  1.992936  3.125897  3.123013\n",
            "32    7  0.6  0.3  0.1  0.353857  0.470739  1.810703  2.947739  3.074691\n",
            "33    7  0.7  0.1  0.2  0.313585  0.432911  1.665197  2.628004  3.115119\n",
            "34    7  0.7  0.2  0.1  0.321107  0.432911  1.665197  2.680663  3.089415\n",
            "35    7  0.8  0.1  0.1  0.265705  0.359241  1.381825  2.219179  3.092535\n",
            "    lam   v1   v2   v3         D         T         M         I         S\n",
            "0     8  0.1  0.1  0.8  0.304322  0.359241  1.381825  2.793819  2.934968\n",
            "1     8  0.1  0.2  0.7  0.370264  0.432911  1.665197  3.395020  2.923167\n",
            "2     8  0.1  0.3  0.6  0.406881  0.470739  1.810703  3.725790  2.910107\n",
            "3     8  0.1  0.4  0.5  0.424457  0.487565  1.875425  3.883223  2.901162\n",
            "4     8  0.1  0.5  0.4  0.426078  0.487565  1.875425  3.896187  2.896390\n",
            "5     8  0.1  0.6  0.3  0.411806  0.470739  1.810703  3.765188  2.895071\n",
            "6     8  0.1  0.7  0.2  0.378717  0.432911  1.665197  3.462649  2.895060\n",
            "7     8  0.1  0.8  0.1  0.316873  0.359241  1.381825  2.894227  2.884675\n",
            "8     8  0.2  0.1  0.7  0.339595  0.432911  1.665197  3.149672  3.026448\n",
            "9     8  0.2  0.2  0.6  0.403463  0.518115  1.992936  3.745815  3.034878\n",
            "10    8  0.2  0.3  0.5  0.436242  0.558123  2.146825  4.048057  3.030596\n",
            "11    8  0.2  0.4  0.4  0.448042  0.570259  2.193510  4.154592  3.024634\n",
            "12    8  0.2  0.5  0.3  0.441135  0.558123  2.146825  4.087200  3.017716\n",
            "13    8  0.2  0.6  0.2  0.413513  0.518115  1.992936  3.826216  3.006392\n",
            "14    8  0.2  0.7  0.1  0.355571  0.432911  1.665197  3.277483  2.972415\n",
            "15    8  0.3  0.1  0.6  0.356701  0.470739  1.810703  3.324345  3.065773\n",
            "16    8  0.3  0.2  0.5  0.416353  0.558123  2.146825  3.888947  3.083136\n",
            "17    8  0.3  0.3  0.4  0.443121  0.593094  2.281342  4.138062  3.081443\n",
            "18    8  0.3  0.4  0.3  0.446307  0.593094  2.281342  4.163548  3.073509\n",
            "19    8  0.3  0.5  0.2  0.426124  0.558123  2.146825  3.967118  3.057291\n",
            "20    8  0.3  0.6  0.1  0.373934  0.470739  1.810703  3.462214  3.011895\n",
            "21    8  0.4  0.1  0.5  0.361882  0.487565  1.875425  3.382620  3.088702\n",
            "22    8  0.4  0.2  0.4  0.415255  0.570259  2.193510  3.892303  3.109461\n",
            "23    8  0.4  0.3  0.3  0.433319  0.593094  2.281342  4.059646  3.105879\n",
            "24    8  0.4  0.4  0.2  0.423298  0.570259  2.193510  3.956640  3.088603\n",
            "25    8  0.4  0.5  0.1  0.378851  0.487565  1.875425  3.518377  3.037357\n",
            "26    8  0.5  0.1  0.4  0.356896  0.487565  1.875425  3.342733  3.103824\n",
            "27    8  0.5  0.2  0.3  0.401299  0.558123  2.146825  3.768513  3.123034\n",
            "28    8  0.5  0.3  0.2  0.406177  0.558123  2.146825  3.807541  3.110098\n",
            "29    8  0.5  0.4  0.1  0.372245  0.487565  1.875425  3.465526  3.057318\n",
            "30    8  0.6  0.1  0.3  0.341548  0.470739  1.810703  3.203125  3.113351\n",
            "31    8  0.6  0.2  0.2  0.372540  0.518115  1.992936  3.498438  3.123013\n",
            "32    8  0.6  0.3  0.1  0.353857  0.470739  1.810703  3.301596  3.074691\n",
            "33    8  0.7  0.1  0.2  0.313585  0.432911  1.665197  2.941588  3.115119\n",
            "34    8  0.7  0.2  0.1  0.321107  0.432911  1.665197  3.001770  3.089415\n",
            "35    8  0.8  0.1  0.1  0.265705  0.359241  1.381825  2.484884  3.092535\n",
            "    lam   v1   v2   v3         D         T         M         I         S\n",
            "0     9  0.1  0.1  0.8  0.304322  0.359241  1.381825  3.098141  2.934968\n",
            "1     9  0.1  0.2  0.7  0.370264  0.432911  1.665197  3.765283  2.923167\n",
            "2     9  0.1  0.3  0.6  0.406881  0.470739  1.810703  4.132671  2.910107\n",
            "3     9  0.1  0.4  0.5  0.424457  0.487565  1.875425  4.307681  2.901162\n",
            "4     9  0.1  0.5  0.4  0.426078  0.487565  1.875425  4.322265  2.896390\n",
            "5     9  0.1  0.6  0.3  0.411806  0.470739  1.810703  4.176994  2.895071\n",
            "6     9  0.1  0.7  0.2  0.378717  0.432911  1.665197  3.841367  2.895060\n",
            "7     9  0.1  0.8  0.1  0.316873  0.359241  1.381825  3.211100  2.884675\n",
            "8     9  0.2  0.1  0.7  0.339595  0.432911  1.665197  3.489267  3.026448\n",
            "9     9  0.2  0.2  0.6  0.403463  0.518115  1.992936  4.149278  3.034878\n",
            "10    9  0.2  0.3  0.5  0.436242  0.558123  2.146825  4.484299  3.030596\n",
            "11    9  0.2  0.4  0.4  0.448042  0.570259  2.193510  4.602633  3.024634\n",
            "12    9  0.2  0.5  0.3  0.441135  0.558123  2.146825  4.528335  3.017716\n",
            "13    9  0.2  0.6  0.2  0.413513  0.518115  1.992936  4.239729  3.006392\n",
            "14    9  0.2  0.7  0.1  0.355571  0.432911  1.665197  3.633054  2.972415\n",
            "15    9  0.3  0.1  0.6  0.356701  0.470739  1.810703  3.681046  3.065773\n",
            "16    9  0.3  0.2  0.5  0.416353  0.558123  2.146825  4.305300  3.083136\n",
            "17    9  0.3  0.3  0.4  0.443121  0.593094  2.281342  4.581183  3.081443\n",
            "18    9  0.3  0.4  0.3  0.446307  0.593094  2.281342  4.609854  3.073509\n",
            "19    9  0.3  0.5  0.2  0.426124  0.558123  2.146825  4.393242  3.057291\n",
            "20    9  0.3  0.6  0.1  0.373934  0.470739  1.810703  3.836148  3.011895\n",
            "21    9  0.4  0.1  0.5  0.361882  0.487565  1.875425  3.744501  3.088702\n",
            "22    9  0.4  0.2  0.4  0.415255  0.570259  2.193510  4.307559  3.109461\n",
            "23    9  0.4  0.3  0.3  0.433319  0.593094  2.281342  4.492965  3.105879\n",
            "24    9  0.4  0.4  0.2  0.423298  0.570259  2.193510  4.379938  3.088603\n",
            "25    9  0.4  0.5  0.1  0.378851  0.487565  1.875425  3.897228  3.037357\n",
            "26    9  0.5  0.1  0.4  0.356896  0.487565  1.875425  3.699629  3.103824\n",
            "27    9  0.5  0.2  0.3  0.401299  0.558123  2.146825  4.169812  3.123034\n",
            "28    9  0.5  0.3  0.2  0.406177  0.558123  2.146825  4.213718  3.110098\n",
            "29    9  0.5  0.4  0.1  0.372245  0.487565  1.875425  3.837772  3.057318\n",
            "30    9  0.6  0.1  0.3  0.341548  0.470739  1.810703  3.544673  3.113351\n",
            "31    9  0.6  0.2  0.2  0.372540  0.518115  1.992936  3.870978  3.123013\n",
            "32    9  0.6  0.3  0.1  0.353857  0.470739  1.810703  3.655453  3.074691\n",
            "33    9  0.7  0.1  0.2  0.313585  0.432911  1.665197  3.255173  3.115119\n",
            "34    9  0.7  0.2  0.1  0.321107  0.432911  1.665197  3.322877  3.089415\n",
            "35    9  0.8  0.1  0.1  0.265705  0.359241  1.381825  2.750590  3.092535\n",
            "    lam   v1   v2   v3         D         T         M         I         S\n",
            "0    10  0.1  0.1  0.8  0.304322  0.359241  1.381825  3.402464  2.934968\n",
            "1    10  0.1  0.2  0.7  0.370264  0.432911  1.665197  4.135547  2.923167\n",
            "2    10  0.1  0.3  0.6  0.406881  0.470739  1.810703  4.539553  2.910107\n",
            "3    10  0.1  0.4  0.5  0.424457  0.487565  1.875425  4.732138  2.901162\n",
            "4    10  0.1  0.5  0.4  0.426078  0.487565  1.875425  4.748343  2.896390\n",
            "5    10  0.1  0.6  0.3  0.411806  0.470739  1.810703  4.588800  2.895071\n",
            "6    10  0.1  0.7  0.2  0.378717  0.432911  1.665197  4.220084  2.895060\n",
            "7    10  0.1  0.8  0.1  0.316873  0.359241  1.381825  3.527973  2.884675\n",
            "8    10  0.2  0.1  0.7  0.339595  0.432911  1.665197  3.828862  3.026448\n",
            "9    10  0.2  0.2  0.6  0.403463  0.518115  1.992936  4.552740  3.034878\n",
            "10   10  0.2  0.3  0.5  0.436242  0.558123  2.146825  4.920541  3.030596\n",
            "11   10  0.2  0.4  0.4  0.448042  0.570259  2.193510  5.050675  3.024634\n",
            "12   10  0.2  0.5  0.3  0.441135  0.558123  2.146825  4.969469  3.017716\n",
            "13   10  0.2  0.6  0.2  0.413513  0.518115  1.992936  4.653242  3.006392\n",
            "14   10  0.2  0.7  0.1  0.355571  0.432911  1.665197  3.988626  2.972415\n",
            "15   10  0.3  0.1  0.6  0.356701  0.470739  1.810703  4.037747  3.065773\n",
            "16   10  0.3  0.2  0.5  0.416353  0.558123  2.146825  4.721653  3.083136\n",
            "17   10  0.3  0.3  0.4  0.443121  0.593094  2.281342  5.024304  3.081443\n",
            "18   10  0.3  0.4  0.3  0.446307  0.593094  2.281342  5.056161  3.073509\n",
            "19   10  0.3  0.5  0.2  0.426124  0.558123  2.146825  4.819367  3.057291\n",
            "20   10  0.3  0.6  0.1  0.373934  0.470739  1.810703  4.210082  3.011895\n",
            "21   10  0.4  0.1  0.5  0.361882  0.487565  1.875425  4.106383  3.088702\n",
            "22   10  0.4  0.2  0.4  0.415255  0.570259  2.193510  4.722814  3.109461\n",
            "23   10  0.4  0.3  0.3  0.433319  0.593094  2.281342  4.926284  3.105879\n",
            "24   10  0.4  0.4  0.2  0.423298  0.570259  2.193510  4.803235  3.088603\n",
            "25   10  0.4  0.5  0.1  0.378851  0.487565  1.875425  4.276079  3.037357\n",
            "26   10  0.5  0.1  0.4  0.356896  0.487565  1.875425  4.056525  3.103824\n",
            "27   10  0.5  0.2  0.3  0.401299  0.558123  2.146825  4.571110  3.123034\n",
            "28   10  0.5  0.3  0.2  0.406177  0.558123  2.146825  4.619896  3.110098\n",
            "29   10  0.5  0.4  0.1  0.372245  0.487565  1.875425  4.210017  3.057318\n",
            "30   10  0.6  0.1  0.3  0.341548  0.470739  1.810703  3.886222  3.113351\n",
            "31   10  0.6  0.2  0.2  0.372540  0.518115  1.992936  4.243519  3.123013\n",
            "32   10  0.6  0.3  0.1  0.353857  0.470739  1.810703  4.009310  3.074691\n",
            "33   10  0.7  0.1  0.2  0.313585  0.432911  1.665197  3.568758  3.115119\n",
            "34   10  0.7  0.2  0.1  0.321107  0.432911  1.665197  3.643985  3.089415\n",
            "35   10  0.8  0.1  0.1  0.265705  0.359241  1.381825  3.016295  3.092535\n"
          ]
        }
      ]
    }
  ]
}